
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model product_table
 */

export type product_table = {
  product_id: number
  product_ref: string
  product_name: string
  product_brand_id: number
  product_category: string | null
  product_price: number | null
  product_gen_description: string | null
  product_gen_characteristic: string | null
  date_created: Date
  product_factory_price: number | null
  currency: string | null
  product_weight: number | null
  product_coutry_of_origin: string | null
  product_sell_unit: string | null
  product_box_weight: number | null
  product_sku: string | null
  product_min_quanity: number | null
  product_volume: number | null
  product_custom_border_id: string | null
  product_box_quantity: number | null
  product_box_volume: number | null
  product_img: string | null
}

/**
 * Model brand_table
 */

export type brand_table = {
  brand_id: number
  brand_name: string
  brand_country_of_origin: string | null
  industry: string | null
  brand_img: string | null
  date_created: Date
}

/**
 * Model order_table
 */

export type order_table = {
  order_id: number
  order_product_list: Prisma.JsonValue
  order_import_cost: number | null
  order_tax_cost: number | null
  order_total_cost: number | null
  currency: string | null
  order_is_incomming: boolean | null
  order_emmitted_date: Date | null
  order_delivery_date: Date | null
  order_is_delivered: boolean | null
}

/**
 * Model inventory_table
 */

export type inventory_table = {
  inventory_id: number
  product_id: number
  order_id: number | null
  inventory_price: number
  currency: string | null
  product_brand_id: number
  date_created: Date | null
  inventory_quantity: number
  last_updated: Date
  agent_id: number | null
  product_mouvement: Prisma.JsonValue | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Product_tables
 * const product_tables = await prisma.product_table.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Product_tables
   * const product_tables = await prisma.product_table.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.product_table`: Exposes CRUD operations for the **product_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_tables
    * const product_tables = await prisma.product_table.findMany()
    * ```
    */
  get product_table(): Prisma.product_tableDelegate<GlobalReject>;

  /**
   * `prisma.brand_table`: Exposes CRUD operations for the **brand_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brand_tables
    * const brand_tables = await prisma.brand_table.findMany()
    * ```
    */
  get brand_table(): Prisma.brand_tableDelegate<GlobalReject>;

  /**
   * `prisma.order_table`: Exposes CRUD operations for the **order_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_tables
    * const order_tables = await prisma.order_table.findMany()
    * ```
    */
  get order_table(): Prisma.order_tableDelegate<GlobalReject>;

  /**
   * `prisma.inventory_table`: Exposes CRUD operations for the **inventory_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventory_tables
    * const inventory_tables = await prisma.inventory_table.findMany()
    * ```
    */
  get inventory_table(): Prisma.inventory_tableDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.2.1
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    product_table: 'product_table',
    brand_table: 'brand_table',
    order_table: 'order_table',
    inventory_table: 'inventory_table'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Product_tableCountOutputType
   */


  export type Product_tableCountOutputType = {
    inventory: number
  }

  export type Product_tableCountOutputTypeSelect = {
    inventory?: boolean
  }

  export type Product_tableCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Product_tableCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Product_tableCountOutputType
    : S extends undefined
    ? never
    : S extends Product_tableCountOutputTypeArgs
    ?'include' extends U
    ? Product_tableCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Product_tableCountOutputType ?Product_tableCountOutputType [P]
  : 
     never
  } 
    : Product_tableCountOutputType
  : Product_tableCountOutputType




  // Custom InputTypes

  /**
   * Product_tableCountOutputType without action
   */
  export type Product_tableCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Product_tableCountOutputType
     * 
    **/
    select?: Product_tableCountOutputTypeSelect | null
  }



  /**
   * Count Type Brand_tableCountOutputType
   */


  export type Brand_tableCountOutputType = {
    product: number
    inventory: number
  }

  export type Brand_tableCountOutputTypeSelect = {
    product?: boolean
    inventory?: boolean
  }

  export type Brand_tableCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Brand_tableCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Brand_tableCountOutputType
    : S extends undefined
    ? never
    : S extends Brand_tableCountOutputTypeArgs
    ?'include' extends U
    ? Brand_tableCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Brand_tableCountOutputType ?Brand_tableCountOutputType [P]
  : 
     never
  } 
    : Brand_tableCountOutputType
  : Brand_tableCountOutputType




  // Custom InputTypes

  /**
   * Brand_tableCountOutputType without action
   */
  export type Brand_tableCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Brand_tableCountOutputType
     * 
    **/
    select?: Brand_tableCountOutputTypeSelect | null
  }



  /**
   * Count Type Order_tableCountOutputType
   */


  export type Order_tableCountOutputType = {
    inventory: number
  }

  export type Order_tableCountOutputTypeSelect = {
    inventory?: boolean
  }

  export type Order_tableCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Order_tableCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Order_tableCountOutputType
    : S extends undefined
    ? never
    : S extends Order_tableCountOutputTypeArgs
    ?'include' extends U
    ? Order_tableCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Order_tableCountOutputType ?Order_tableCountOutputType [P]
  : 
     never
  } 
    : Order_tableCountOutputType
  : Order_tableCountOutputType




  // Custom InputTypes

  /**
   * Order_tableCountOutputType without action
   */
  export type Order_tableCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Order_tableCountOutputType
     * 
    **/
    select?: Order_tableCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model product_table
   */


  export type AggregateProduct_table = {
    _count: Product_tableCountAggregateOutputType | null
    _avg: Product_tableAvgAggregateOutputType | null
    _sum: Product_tableSumAggregateOutputType | null
    _min: Product_tableMinAggregateOutputType | null
    _max: Product_tableMaxAggregateOutputType | null
  }

  export type Product_tableAvgAggregateOutputType = {
    product_id: number | null
    product_brand_id: number | null
    product_price: number | null
    product_factory_price: number | null
    product_weight: number | null
    product_box_weight: number | null
    product_min_quanity: number | null
    product_volume: number | null
    product_box_quantity: number | null
    product_box_volume: number | null
  }

  export type Product_tableSumAggregateOutputType = {
    product_id: number | null
    product_brand_id: number | null
    product_price: number | null
    product_factory_price: number | null
    product_weight: number | null
    product_box_weight: number | null
    product_min_quanity: number | null
    product_volume: number | null
    product_box_quantity: number | null
    product_box_volume: number | null
  }

  export type Product_tableMinAggregateOutputType = {
    product_id: number | null
    product_ref: string | null
    product_name: string | null
    product_brand_id: number | null
    product_category: string | null
    product_price: number | null
    product_gen_description: string | null
    product_gen_characteristic: string | null
    date_created: Date | null
    product_factory_price: number | null
    currency: string | null
    product_weight: number | null
    product_coutry_of_origin: string | null
    product_sell_unit: string | null
    product_box_weight: number | null
    product_sku: string | null
    product_min_quanity: number | null
    product_volume: number | null
    product_custom_border_id: string | null
    product_box_quantity: number | null
    product_box_volume: number | null
    product_img: string | null
  }

  export type Product_tableMaxAggregateOutputType = {
    product_id: number | null
    product_ref: string | null
    product_name: string | null
    product_brand_id: number | null
    product_category: string | null
    product_price: number | null
    product_gen_description: string | null
    product_gen_characteristic: string | null
    date_created: Date | null
    product_factory_price: number | null
    currency: string | null
    product_weight: number | null
    product_coutry_of_origin: string | null
    product_sell_unit: string | null
    product_box_weight: number | null
    product_sku: string | null
    product_min_quanity: number | null
    product_volume: number | null
    product_custom_border_id: string | null
    product_box_quantity: number | null
    product_box_volume: number | null
    product_img: string | null
  }

  export type Product_tableCountAggregateOutputType = {
    product_id: number
    product_ref: number
    product_name: number
    product_brand_id: number
    product_category: number
    product_price: number
    product_gen_description: number
    product_gen_characteristic: number
    date_created: number
    product_factory_price: number
    currency: number
    product_weight: number
    product_coutry_of_origin: number
    product_sell_unit: number
    product_box_weight: number
    product_sku: number
    product_min_quanity: number
    product_volume: number
    product_custom_border_id: number
    product_box_quantity: number
    product_box_volume: number
    product_img: number
    _all: number
  }


  export type Product_tableAvgAggregateInputType = {
    product_id?: true
    product_brand_id?: true
    product_price?: true
    product_factory_price?: true
    product_weight?: true
    product_box_weight?: true
    product_min_quanity?: true
    product_volume?: true
    product_box_quantity?: true
    product_box_volume?: true
  }

  export type Product_tableSumAggregateInputType = {
    product_id?: true
    product_brand_id?: true
    product_price?: true
    product_factory_price?: true
    product_weight?: true
    product_box_weight?: true
    product_min_quanity?: true
    product_volume?: true
    product_box_quantity?: true
    product_box_volume?: true
  }

  export type Product_tableMinAggregateInputType = {
    product_id?: true
    product_ref?: true
    product_name?: true
    product_brand_id?: true
    product_category?: true
    product_price?: true
    product_gen_description?: true
    product_gen_characteristic?: true
    date_created?: true
    product_factory_price?: true
    currency?: true
    product_weight?: true
    product_coutry_of_origin?: true
    product_sell_unit?: true
    product_box_weight?: true
    product_sku?: true
    product_min_quanity?: true
    product_volume?: true
    product_custom_border_id?: true
    product_box_quantity?: true
    product_box_volume?: true
    product_img?: true
  }

  export type Product_tableMaxAggregateInputType = {
    product_id?: true
    product_ref?: true
    product_name?: true
    product_brand_id?: true
    product_category?: true
    product_price?: true
    product_gen_description?: true
    product_gen_characteristic?: true
    date_created?: true
    product_factory_price?: true
    currency?: true
    product_weight?: true
    product_coutry_of_origin?: true
    product_sell_unit?: true
    product_box_weight?: true
    product_sku?: true
    product_min_quanity?: true
    product_volume?: true
    product_custom_border_id?: true
    product_box_quantity?: true
    product_box_volume?: true
    product_img?: true
  }

  export type Product_tableCountAggregateInputType = {
    product_id?: true
    product_ref?: true
    product_name?: true
    product_brand_id?: true
    product_category?: true
    product_price?: true
    product_gen_description?: true
    product_gen_characteristic?: true
    date_created?: true
    product_factory_price?: true
    currency?: true
    product_weight?: true
    product_coutry_of_origin?: true
    product_sell_unit?: true
    product_box_weight?: true
    product_sku?: true
    product_min_quanity?: true
    product_volume?: true
    product_custom_border_id?: true
    product_box_quantity?: true
    product_box_volume?: true
    product_img?: true
    _all?: true
  }

  export type Product_tableAggregateArgs = {
    /**
     * Filter which product_table to aggregate.
     * 
    **/
    where?: product_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<product_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: product_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_tables
    **/
    _count?: true | Product_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_tableMaxAggregateInputType
  }

  export type GetProduct_tableAggregateType<T extends Product_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_table[P]>
      : GetScalarType<T[P], AggregateProduct_table[P]>
  }


    
    
  export type Product_tableGroupByArgs = {
    where?: product_tableWhereInput
    orderBy?: Enumerable<product_tableOrderByWithAggregationInput>
    by: Array<Product_tableScalarFieldEnum>
    having?: product_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_tableCountAggregateInputType | true
    _avg?: Product_tableAvgAggregateInputType
    _sum?: Product_tableSumAggregateInputType
    _min?: Product_tableMinAggregateInputType
    _max?: Product_tableMaxAggregateInputType
  }


  export type Product_tableGroupByOutputType = {
    product_id: number
    product_ref: string
    product_name: string
    product_brand_id: number
    product_category: string | null
    product_price: number | null
    product_gen_description: string | null
    product_gen_characteristic: string | null
    date_created: Date
    product_factory_price: number | null
    currency: string | null
    product_weight: number | null
    product_coutry_of_origin: string | null
    product_sell_unit: string | null
    product_box_weight: number | null
    product_sku: string | null
    product_min_quanity: number | null
    product_volume: number | null
    product_custom_border_id: string | null
    product_box_quantity: number | null
    product_box_volume: number | null
    product_img: string | null
    _count: Product_tableCountAggregateOutputType | null
    _avg: Product_tableAvgAggregateOutputType | null
    _sum: Product_tableSumAggregateOutputType | null
    _min: Product_tableMinAggregateOutputType | null
    _max: Product_tableMaxAggregateOutputType | null
  }

  type GetProduct_tableGroupByPayload<T extends Product_tableGroupByArgs> = Promise<
    Array<
      PickArray<Product_tableGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Product_tableGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Product_tableGroupByOutputType[P]> 
            : GetScalarType<T[P], Product_tableGroupByOutputType[P]>
        }
      > 
    >


  export type product_tableSelect = {
    product_id?: boolean
    product_ref?: boolean
    product_name?: boolean
    product_brand_id?: boolean
    product_category?: boolean
    product_price?: boolean
    product_gen_description?: boolean
    product_gen_characteristic?: boolean
    date_created?: boolean
    product_factory_price?: boolean
    currency?: boolean
    product_weight?: boolean
    product_coutry_of_origin?: boolean
    product_sell_unit?: boolean
    product_box_weight?: boolean
    product_sku?: boolean
    product_min_quanity?: boolean
    product_volume?: boolean
    product_custom_border_id?: boolean
    product_box_quantity?: boolean
    product_box_volume?: boolean
    product_img?: boolean
    brand?: boolean | brand_tableArgs
    inventory?: boolean | inventory_tableFindManyArgs
    _count?: boolean | Product_tableCountOutputTypeArgs
  }

  export type product_tableInclude = {
    brand?: boolean | brand_tableArgs
    inventory?: boolean | inventory_tableFindManyArgs
    _count?: boolean | Product_tableCountOutputTypeArgs
  }

  export type product_tableGetPayload<
    S extends boolean | null | undefined | product_tableArgs,
    U = keyof S
      > = S extends true
        ? product_table
    : S extends undefined
    ? never
    : S extends product_tableArgs | product_tableFindManyArgs
    ?'include' extends U
    ? product_table  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'brand'
        ? brand_tableGetPayload<S['include'][P]> :
        P extends 'inventory'
        ? Array < inventory_tableGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Product_tableCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof product_table ?product_table [P]
  : 
          P extends 'brand'
        ? brand_tableGetPayload<S['select'][P]> :
        P extends 'inventory'
        ? Array < inventory_tableGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Product_tableCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : product_table
  : product_table


  type product_tableCountArgs = Merge<
    Omit<product_tableFindManyArgs, 'select' | 'include'> & {
      select?: Product_tableCountAggregateInputType | true
    }
  >

  export interface product_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product_table that matches the filter.
     * @param {product_tableFindUniqueArgs} args - Arguments to find a Product_table
     * @example
     * // Get one Product_table
     * const product_table = await prisma.product_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, product_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product_table'> extends True ? CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>> : CheckSelect<T, Prisma__product_tableClient<product_table | null >, Prisma__product_tableClient<product_tableGetPayload<T> | null >>

    /**
     * Find the first Product_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableFindFirstArgs} args - Arguments to find a Product_table
     * @example
     * // Get one Product_table
     * const product_table = await prisma.product_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, product_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product_table'> extends True ? CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>> : CheckSelect<T, Prisma__product_tableClient<product_table | null >, Prisma__product_tableClient<product_tableGetPayload<T> | null >>

    /**
     * Find zero or more Product_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_tables
     * const product_tables = await prisma.product_table.findMany()
     * 
     * // Get first 10 Product_tables
     * const product_tables = await prisma.product_table.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const product_tableWithProduct_idOnly = await prisma.product_table.findMany({ select: { product_id: true } })
     * 
    **/
    findMany<T extends product_tableFindManyArgs>(
      args?: SelectSubset<T, product_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<product_table>>, PrismaPromise<Array<product_tableGetPayload<T>>>>

    /**
     * Create a Product_table.
     * @param {product_tableCreateArgs} args - Arguments to create a Product_table.
     * @example
     * // Create one Product_table
     * const Product_table = await prisma.product_table.create({
     *   data: {
     *     // ... data to create a Product_table
     *   }
     * })
     * 
    **/
    create<T extends product_tableCreateArgs>(
      args: SelectSubset<T, product_tableCreateArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Create many Product_tables.
     *     @param {product_tableCreateManyArgs} args - Arguments to create many Product_tables.
     *     @example
     *     // Create many Product_tables
     *     const product_table = await prisma.product_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends product_tableCreateManyArgs>(
      args?: SelectSubset<T, product_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product_table.
     * @param {product_tableDeleteArgs} args - Arguments to delete one Product_table.
     * @example
     * // Delete one Product_table
     * const Product_table = await prisma.product_table.delete({
     *   where: {
     *     // ... filter to delete one Product_table
     *   }
     * })
     * 
    **/
    delete<T extends product_tableDeleteArgs>(
      args: SelectSubset<T, product_tableDeleteArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Update one Product_table.
     * @param {product_tableUpdateArgs} args - Arguments to update one Product_table.
     * @example
     * // Update one Product_table
     * const product_table = await prisma.product_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_tableUpdateArgs>(
      args: SelectSubset<T, product_tableUpdateArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Delete zero or more Product_tables.
     * @param {product_tableDeleteManyArgs} args - Arguments to filter Product_tables to delete.
     * @example
     * // Delete a few Product_tables
     * const { count } = await prisma.product_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_tableDeleteManyArgs>(
      args?: SelectSubset<T, product_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_tables
     * const product_table = await prisma.product_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_tableUpdateManyArgs>(
      args: SelectSubset<T, product_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_table.
     * @param {product_tableUpsertArgs} args - Arguments to update or create a Product_table.
     * @example
     * // Update or create a Product_table
     * const product_table = await prisma.product_table.upsert({
     *   create: {
     *     // ... data to create a Product_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_table we want to update
     *   }
     * })
    **/
    upsert<T extends product_tableUpsertArgs>(
      args: SelectSubset<T, product_tableUpsertArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Count the number of Product_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableCountArgs} args - Arguments to filter Product_tables to count.
     * @example
     * // Count the number of Product_tables
     * const count = await prisma.product_table.count({
     *   where: {
     *     // ... the filter for the Product_tables we want to count
     *   }
     * })
    **/
    count<T extends product_tableCountArgs>(
      args?: Subset<T, product_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_tableAggregateArgs>(args: Subset<T, Product_tableAggregateArgs>): PrismaPromise<GetProduct_tableAggregateType<T>>

    /**
     * Group by Product_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_tableGroupByArgs['orderBy'] }
        : { orderBy?: Product_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_tableGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__product_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    brand<T extends brand_tableArgs = {}>(args?: Subset<T, brand_tableArgs>): CheckSelect<T, Prisma__brand_tableClient<brand_table | null >, Prisma__brand_tableClient<brand_tableGetPayload<T> | null >>;

    inventory<T extends inventory_tableFindManyArgs = {}>(args?: Subset<T, inventory_tableFindManyArgs>): CheckSelect<T, PrismaPromise<Array<inventory_table>>, PrismaPromise<Array<inventory_tableGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * product_table findUnique
   */
  export type product_tableFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * Throw an Error if a product_table can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product_table to fetch.
     * 
    **/
    where: product_tableWhereUniqueInput
  }


  /**
   * product_table findFirst
   */
  export type product_tableFindFirstArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * Throw an Error if a product_table can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product_table to fetch.
     * 
    **/
    where?: product_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<product_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_tables.
     * 
    **/
    cursor?: product_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_tables.
     * 
    **/
    distinct?: Enumerable<Product_tableScalarFieldEnum>
  }


  /**
   * product_table findMany
   */
  export type product_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * Filter, which product_tables to fetch.
     * 
    **/
    where?: product_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<product_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_tables.
     * 
    **/
    cursor?: product_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Product_tableScalarFieldEnum>
  }


  /**
   * product_table create
   */
  export type product_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * The data needed to create a product_table.
     * 
    **/
    data: XOR<product_tableCreateInput, product_tableUncheckedCreateInput>
  }


  /**
   * product_table createMany
   */
  export type product_tableCreateManyArgs = {
    data: Enumerable<product_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product_table update
   */
  export type product_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * The data needed to update a product_table.
     * 
    **/
    data: XOR<product_tableUpdateInput, product_tableUncheckedUpdateInput>
    /**
     * Choose, which product_table to update.
     * 
    **/
    where: product_tableWhereUniqueInput
  }


  /**
   * product_table updateMany
   */
  export type product_tableUpdateManyArgs = {
    data: XOR<product_tableUpdateManyMutationInput, product_tableUncheckedUpdateManyInput>
    where?: product_tableWhereInput
  }


  /**
   * product_table upsert
   */
  export type product_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * The filter to search for the product_table to update in case it exists.
     * 
    **/
    where: product_tableWhereUniqueInput
    /**
     * In case the product_table found by the `where` argument doesn't exist, create a new product_table with this data.
     * 
    **/
    create: XOR<product_tableCreateInput, product_tableUncheckedCreateInput>
    /**
     * In case the product_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<product_tableUpdateInput, product_tableUncheckedUpdateInput>
  }


  /**
   * product_table delete
   */
  export type product_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * Filter which product_table to delete.
     * 
    **/
    where: product_tableWhereUniqueInput
  }


  /**
   * product_table deleteMany
   */
  export type product_tableDeleteManyArgs = {
    where?: product_tableWhereInput
  }


  /**
   * product_table without action
   */
  export type product_tableArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
  }



  /**
   * Model brand_table
   */


  export type AggregateBrand_table = {
    _count: Brand_tableCountAggregateOutputType | null
    _avg: Brand_tableAvgAggregateOutputType | null
    _sum: Brand_tableSumAggregateOutputType | null
    _min: Brand_tableMinAggregateOutputType | null
    _max: Brand_tableMaxAggregateOutputType | null
  }

  export type Brand_tableAvgAggregateOutputType = {
    brand_id: number | null
  }

  export type Brand_tableSumAggregateOutputType = {
    brand_id: number | null
  }

  export type Brand_tableMinAggregateOutputType = {
    brand_id: number | null
    brand_name: string | null
    brand_country_of_origin: string | null
    industry: string | null
    brand_img: string | null
    date_created: Date | null
  }

  export type Brand_tableMaxAggregateOutputType = {
    brand_id: number | null
    brand_name: string | null
    brand_country_of_origin: string | null
    industry: string | null
    brand_img: string | null
    date_created: Date | null
  }

  export type Brand_tableCountAggregateOutputType = {
    brand_id: number
    brand_name: number
    brand_country_of_origin: number
    industry: number
    brand_img: number
    date_created: number
    _all: number
  }


  export type Brand_tableAvgAggregateInputType = {
    brand_id?: true
  }

  export type Brand_tableSumAggregateInputType = {
    brand_id?: true
  }

  export type Brand_tableMinAggregateInputType = {
    brand_id?: true
    brand_name?: true
    brand_country_of_origin?: true
    industry?: true
    brand_img?: true
    date_created?: true
  }

  export type Brand_tableMaxAggregateInputType = {
    brand_id?: true
    brand_name?: true
    brand_country_of_origin?: true
    industry?: true
    brand_img?: true
    date_created?: true
  }

  export type Brand_tableCountAggregateInputType = {
    brand_id?: true
    brand_name?: true
    brand_country_of_origin?: true
    industry?: true
    brand_img?: true
    date_created?: true
    _all?: true
  }

  export type Brand_tableAggregateArgs = {
    /**
     * Filter which brand_table to aggregate.
     * 
    **/
    where?: brand_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brand_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<brand_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: brand_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brand_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brand_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned brand_tables
    **/
    _count?: true | Brand_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Brand_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Brand_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Brand_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Brand_tableMaxAggregateInputType
  }

  export type GetBrand_tableAggregateType<T extends Brand_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand_table[P]>
      : GetScalarType<T[P], AggregateBrand_table[P]>
  }


    
    
  export type Brand_tableGroupByArgs = {
    where?: brand_tableWhereInput
    orderBy?: Enumerable<brand_tableOrderByWithAggregationInput>
    by: Array<Brand_tableScalarFieldEnum>
    having?: brand_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Brand_tableCountAggregateInputType | true
    _avg?: Brand_tableAvgAggregateInputType
    _sum?: Brand_tableSumAggregateInputType
    _min?: Brand_tableMinAggregateInputType
    _max?: Brand_tableMaxAggregateInputType
  }


  export type Brand_tableGroupByOutputType = {
    brand_id: number
    brand_name: string
    brand_country_of_origin: string | null
    industry: string | null
    brand_img: string | null
    date_created: Date
    _count: Brand_tableCountAggregateOutputType | null
    _avg: Brand_tableAvgAggregateOutputType | null
    _sum: Brand_tableSumAggregateOutputType | null
    _min: Brand_tableMinAggregateOutputType | null
    _max: Brand_tableMaxAggregateOutputType | null
  }

  type GetBrand_tableGroupByPayload<T extends Brand_tableGroupByArgs> = Promise<
    Array<
      PickArray<Brand_tableGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Brand_tableGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Brand_tableGroupByOutputType[P]> 
            : GetScalarType<T[P], Brand_tableGroupByOutputType[P]>
        }
      > 
    >


  export type brand_tableSelect = {
    brand_id?: boolean
    brand_name?: boolean
    brand_country_of_origin?: boolean
    industry?: boolean
    brand_img?: boolean
    date_created?: boolean
    product?: boolean | product_tableFindManyArgs
    inventory?: boolean | inventory_tableFindManyArgs
    _count?: boolean | Brand_tableCountOutputTypeArgs
  }

  export type brand_tableInclude = {
    product?: boolean | product_tableFindManyArgs
    inventory?: boolean | inventory_tableFindManyArgs
    _count?: boolean | Brand_tableCountOutputTypeArgs
  }

  export type brand_tableGetPayload<
    S extends boolean | null | undefined | brand_tableArgs,
    U = keyof S
      > = S extends true
        ? brand_table
    : S extends undefined
    ? never
    : S extends brand_tableArgs | brand_tableFindManyArgs
    ?'include' extends U
    ? brand_table  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'product'
        ? Array < product_tableGetPayload<S['include'][P]>>  :
        P extends 'inventory'
        ? Array < inventory_tableGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Brand_tableCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof brand_table ?brand_table [P]
  : 
          P extends 'product'
        ? Array < product_tableGetPayload<S['select'][P]>>  :
        P extends 'inventory'
        ? Array < inventory_tableGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Brand_tableCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : brand_table
  : brand_table


  type brand_tableCountArgs = Merge<
    Omit<brand_tableFindManyArgs, 'select' | 'include'> & {
      select?: Brand_tableCountAggregateInputType | true
    }
  >

  export interface brand_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Brand_table that matches the filter.
     * @param {brand_tableFindUniqueArgs} args - Arguments to find a Brand_table
     * @example
     * // Get one Brand_table
     * const brand_table = await prisma.brand_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends brand_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, brand_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'brand_table'> extends True ? CheckSelect<T, Prisma__brand_tableClient<brand_table>, Prisma__brand_tableClient<brand_tableGetPayload<T>>> : CheckSelect<T, Prisma__brand_tableClient<brand_table | null >, Prisma__brand_tableClient<brand_tableGetPayload<T> | null >>

    /**
     * Find the first Brand_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brand_tableFindFirstArgs} args - Arguments to find a Brand_table
     * @example
     * // Get one Brand_table
     * const brand_table = await prisma.brand_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends brand_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, brand_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'brand_table'> extends True ? CheckSelect<T, Prisma__brand_tableClient<brand_table>, Prisma__brand_tableClient<brand_tableGetPayload<T>>> : CheckSelect<T, Prisma__brand_tableClient<brand_table | null >, Prisma__brand_tableClient<brand_tableGetPayload<T> | null >>

    /**
     * Find zero or more Brand_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brand_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brand_tables
     * const brand_tables = await prisma.brand_table.findMany()
     * 
     * // Get first 10 Brand_tables
     * const brand_tables = await prisma.brand_table.findMany({ take: 10 })
     * 
     * // Only select the `brand_id`
     * const brand_tableWithBrand_idOnly = await prisma.brand_table.findMany({ select: { brand_id: true } })
     * 
    **/
    findMany<T extends brand_tableFindManyArgs>(
      args?: SelectSubset<T, brand_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<brand_table>>, PrismaPromise<Array<brand_tableGetPayload<T>>>>

    /**
     * Create a Brand_table.
     * @param {brand_tableCreateArgs} args - Arguments to create a Brand_table.
     * @example
     * // Create one Brand_table
     * const Brand_table = await prisma.brand_table.create({
     *   data: {
     *     // ... data to create a Brand_table
     *   }
     * })
     * 
    **/
    create<T extends brand_tableCreateArgs>(
      args: SelectSubset<T, brand_tableCreateArgs>
    ): CheckSelect<T, Prisma__brand_tableClient<brand_table>, Prisma__brand_tableClient<brand_tableGetPayload<T>>>

    /**
     * Create many Brand_tables.
     *     @param {brand_tableCreateManyArgs} args - Arguments to create many Brand_tables.
     *     @example
     *     // Create many Brand_tables
     *     const brand_table = await prisma.brand_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends brand_tableCreateManyArgs>(
      args?: SelectSubset<T, brand_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Brand_table.
     * @param {brand_tableDeleteArgs} args - Arguments to delete one Brand_table.
     * @example
     * // Delete one Brand_table
     * const Brand_table = await prisma.brand_table.delete({
     *   where: {
     *     // ... filter to delete one Brand_table
     *   }
     * })
     * 
    **/
    delete<T extends brand_tableDeleteArgs>(
      args: SelectSubset<T, brand_tableDeleteArgs>
    ): CheckSelect<T, Prisma__brand_tableClient<brand_table>, Prisma__brand_tableClient<brand_tableGetPayload<T>>>

    /**
     * Update one Brand_table.
     * @param {brand_tableUpdateArgs} args - Arguments to update one Brand_table.
     * @example
     * // Update one Brand_table
     * const brand_table = await prisma.brand_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends brand_tableUpdateArgs>(
      args: SelectSubset<T, brand_tableUpdateArgs>
    ): CheckSelect<T, Prisma__brand_tableClient<brand_table>, Prisma__brand_tableClient<brand_tableGetPayload<T>>>

    /**
     * Delete zero or more Brand_tables.
     * @param {brand_tableDeleteManyArgs} args - Arguments to filter Brand_tables to delete.
     * @example
     * // Delete a few Brand_tables
     * const { count } = await prisma.brand_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends brand_tableDeleteManyArgs>(
      args?: SelectSubset<T, brand_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brand_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brand_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brand_tables
     * const brand_table = await prisma.brand_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends brand_tableUpdateManyArgs>(
      args: SelectSubset<T, brand_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Brand_table.
     * @param {brand_tableUpsertArgs} args - Arguments to update or create a Brand_table.
     * @example
     * // Update or create a Brand_table
     * const brand_table = await prisma.brand_table.upsert({
     *   create: {
     *     // ... data to create a Brand_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand_table we want to update
     *   }
     * })
    **/
    upsert<T extends brand_tableUpsertArgs>(
      args: SelectSubset<T, brand_tableUpsertArgs>
    ): CheckSelect<T, Prisma__brand_tableClient<brand_table>, Prisma__brand_tableClient<brand_tableGetPayload<T>>>

    /**
     * Count the number of Brand_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brand_tableCountArgs} args - Arguments to filter Brand_tables to count.
     * @example
     * // Count the number of Brand_tables
     * const count = await prisma.brand_table.count({
     *   where: {
     *     // ... the filter for the Brand_tables we want to count
     *   }
     * })
    **/
    count<T extends brand_tableCountArgs>(
      args?: Subset<T, brand_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Brand_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Brand_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Brand_tableAggregateArgs>(args: Subset<T, Brand_tableAggregateArgs>): PrismaPromise<GetBrand_tableAggregateType<T>>

    /**
     * Group by Brand_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Brand_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Brand_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Brand_tableGroupByArgs['orderBy'] }
        : { orderBy?: Brand_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Brand_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrand_tableGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for brand_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__brand_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends product_tableFindManyArgs = {}>(args?: Subset<T, product_tableFindManyArgs>): CheckSelect<T, PrismaPromise<Array<product_table>>, PrismaPromise<Array<product_tableGetPayload<T>>>>;

    inventory<T extends inventory_tableFindManyArgs = {}>(args?: Subset<T, inventory_tableFindManyArgs>): CheckSelect<T, PrismaPromise<Array<inventory_table>>, PrismaPromise<Array<inventory_tableGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * brand_table findUnique
   */
  export type brand_tableFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the brand_table
     * 
    **/
    select?: brand_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: brand_tableInclude | null
    /**
     * Throw an Error if a brand_table can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which brand_table to fetch.
     * 
    **/
    where: brand_tableWhereUniqueInput
  }


  /**
   * brand_table findFirst
   */
  export type brand_tableFindFirstArgs = {
    /**
     * Select specific fields to fetch from the brand_table
     * 
    **/
    select?: brand_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: brand_tableInclude | null
    /**
     * Throw an Error if a brand_table can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which brand_table to fetch.
     * 
    **/
    where?: brand_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brand_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<brand_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brand_tables.
     * 
    **/
    cursor?: brand_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brand_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brand_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brand_tables.
     * 
    **/
    distinct?: Enumerable<Brand_tableScalarFieldEnum>
  }


  /**
   * brand_table findMany
   */
  export type brand_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the brand_table
     * 
    **/
    select?: brand_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: brand_tableInclude | null
    /**
     * Filter, which brand_tables to fetch.
     * 
    **/
    where?: brand_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brand_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<brand_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing brand_tables.
     * 
    **/
    cursor?: brand_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brand_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brand_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Brand_tableScalarFieldEnum>
  }


  /**
   * brand_table create
   */
  export type brand_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the brand_table
     * 
    **/
    select?: brand_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: brand_tableInclude | null
    /**
     * The data needed to create a brand_table.
     * 
    **/
    data: XOR<brand_tableCreateInput, brand_tableUncheckedCreateInput>
  }


  /**
   * brand_table createMany
   */
  export type brand_tableCreateManyArgs = {
    data: Enumerable<brand_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * brand_table update
   */
  export type brand_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the brand_table
     * 
    **/
    select?: brand_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: brand_tableInclude | null
    /**
     * The data needed to update a brand_table.
     * 
    **/
    data: XOR<brand_tableUpdateInput, brand_tableUncheckedUpdateInput>
    /**
     * Choose, which brand_table to update.
     * 
    **/
    where: brand_tableWhereUniqueInput
  }


  /**
   * brand_table updateMany
   */
  export type brand_tableUpdateManyArgs = {
    data: XOR<brand_tableUpdateManyMutationInput, brand_tableUncheckedUpdateManyInput>
    where?: brand_tableWhereInput
  }


  /**
   * brand_table upsert
   */
  export type brand_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the brand_table
     * 
    **/
    select?: brand_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: brand_tableInclude | null
    /**
     * The filter to search for the brand_table to update in case it exists.
     * 
    **/
    where: brand_tableWhereUniqueInput
    /**
     * In case the brand_table found by the `where` argument doesn't exist, create a new brand_table with this data.
     * 
    **/
    create: XOR<brand_tableCreateInput, brand_tableUncheckedCreateInput>
    /**
     * In case the brand_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<brand_tableUpdateInput, brand_tableUncheckedUpdateInput>
  }


  /**
   * brand_table delete
   */
  export type brand_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the brand_table
     * 
    **/
    select?: brand_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: brand_tableInclude | null
    /**
     * Filter which brand_table to delete.
     * 
    **/
    where: brand_tableWhereUniqueInput
  }


  /**
   * brand_table deleteMany
   */
  export type brand_tableDeleteManyArgs = {
    where?: brand_tableWhereInput
  }


  /**
   * brand_table without action
   */
  export type brand_tableArgs = {
    /**
     * Select specific fields to fetch from the brand_table
     * 
    **/
    select?: brand_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: brand_tableInclude | null
  }



  /**
   * Model order_table
   */


  export type AggregateOrder_table = {
    _count: Order_tableCountAggregateOutputType | null
    _avg: Order_tableAvgAggregateOutputType | null
    _sum: Order_tableSumAggregateOutputType | null
    _min: Order_tableMinAggregateOutputType | null
    _max: Order_tableMaxAggregateOutputType | null
  }

  export type Order_tableAvgAggregateOutputType = {
    order_id: number | null
    order_import_cost: number | null
    order_tax_cost: number | null
    order_total_cost: number | null
  }

  export type Order_tableSumAggregateOutputType = {
    order_id: number | null
    order_import_cost: number | null
    order_tax_cost: number | null
    order_total_cost: number | null
  }

  export type Order_tableMinAggregateOutputType = {
    order_id: number | null
    order_import_cost: number | null
    order_tax_cost: number | null
    order_total_cost: number | null
    currency: string | null
    order_is_incomming: boolean | null
    order_emmitted_date: Date | null
    order_delivery_date: Date | null
    order_is_delivered: boolean | null
  }

  export type Order_tableMaxAggregateOutputType = {
    order_id: number | null
    order_import_cost: number | null
    order_tax_cost: number | null
    order_total_cost: number | null
    currency: string | null
    order_is_incomming: boolean | null
    order_emmitted_date: Date | null
    order_delivery_date: Date | null
    order_is_delivered: boolean | null
  }

  export type Order_tableCountAggregateOutputType = {
    order_id: number
    order_product_list: number
    order_import_cost: number
    order_tax_cost: number
    order_total_cost: number
    currency: number
    order_is_incomming: number
    order_emmitted_date: number
    order_delivery_date: number
    order_is_delivered: number
    _all: number
  }


  export type Order_tableAvgAggregateInputType = {
    order_id?: true
    order_import_cost?: true
    order_tax_cost?: true
    order_total_cost?: true
  }

  export type Order_tableSumAggregateInputType = {
    order_id?: true
    order_import_cost?: true
    order_tax_cost?: true
    order_total_cost?: true
  }

  export type Order_tableMinAggregateInputType = {
    order_id?: true
    order_import_cost?: true
    order_tax_cost?: true
    order_total_cost?: true
    currency?: true
    order_is_incomming?: true
    order_emmitted_date?: true
    order_delivery_date?: true
    order_is_delivered?: true
  }

  export type Order_tableMaxAggregateInputType = {
    order_id?: true
    order_import_cost?: true
    order_tax_cost?: true
    order_total_cost?: true
    currency?: true
    order_is_incomming?: true
    order_emmitted_date?: true
    order_delivery_date?: true
    order_is_delivered?: true
  }

  export type Order_tableCountAggregateInputType = {
    order_id?: true
    order_product_list?: true
    order_import_cost?: true
    order_tax_cost?: true
    order_total_cost?: true
    currency?: true
    order_is_incomming?: true
    order_emmitted_date?: true
    order_delivery_date?: true
    order_is_delivered?: true
    _all?: true
  }

  export type Order_tableAggregateArgs = {
    /**
     * Filter which order_table to aggregate.
     * 
    **/
    where?: order_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<order_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: order_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned order_tables
    **/
    _count?: true | Order_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_tableMaxAggregateInputType
  }

  export type GetOrder_tableAggregateType<T extends Order_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_table[P]>
      : GetScalarType<T[P], AggregateOrder_table[P]>
  }


    
    
  export type Order_tableGroupByArgs = {
    where?: order_tableWhereInput
    orderBy?: Enumerable<order_tableOrderByWithAggregationInput>
    by: Array<Order_tableScalarFieldEnum>
    having?: order_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_tableCountAggregateInputType | true
    _avg?: Order_tableAvgAggregateInputType
    _sum?: Order_tableSumAggregateInputType
    _min?: Order_tableMinAggregateInputType
    _max?: Order_tableMaxAggregateInputType
  }


  export type Order_tableGroupByOutputType = {
    order_id: number
    order_product_list: JsonValue
    order_import_cost: number | null
    order_tax_cost: number | null
    order_total_cost: number | null
    currency: string | null
    order_is_incomming: boolean | null
    order_emmitted_date: Date | null
    order_delivery_date: Date | null
    order_is_delivered: boolean | null
    _count: Order_tableCountAggregateOutputType | null
    _avg: Order_tableAvgAggregateOutputType | null
    _sum: Order_tableSumAggregateOutputType | null
    _min: Order_tableMinAggregateOutputType | null
    _max: Order_tableMaxAggregateOutputType | null
  }

  type GetOrder_tableGroupByPayload<T extends Order_tableGroupByArgs> = Promise<
    Array<
      PickArray<Order_tableGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Order_tableGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Order_tableGroupByOutputType[P]> 
            : GetScalarType<T[P], Order_tableGroupByOutputType[P]>
        }
      > 
    >


  export type order_tableSelect = {
    order_id?: boolean
    order_product_list?: boolean
    order_import_cost?: boolean
    order_tax_cost?: boolean
    order_total_cost?: boolean
    currency?: boolean
    order_is_incomming?: boolean
    order_emmitted_date?: boolean
    order_delivery_date?: boolean
    order_is_delivered?: boolean
    inventory?: boolean | inventory_tableFindManyArgs
    _count?: boolean | Order_tableCountOutputTypeArgs
  }

  export type order_tableInclude = {
    inventory?: boolean | inventory_tableFindManyArgs
    _count?: boolean | Order_tableCountOutputTypeArgs
  }

  export type order_tableGetPayload<
    S extends boolean | null | undefined | order_tableArgs,
    U = keyof S
      > = S extends true
        ? order_table
    : S extends undefined
    ? never
    : S extends order_tableArgs | order_tableFindManyArgs
    ?'include' extends U
    ? order_table  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'inventory'
        ? Array < inventory_tableGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Order_tableCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof order_table ?order_table [P]
  : 
          P extends 'inventory'
        ? Array < inventory_tableGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Order_tableCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : order_table
  : order_table


  type order_tableCountArgs = Merge<
    Omit<order_tableFindManyArgs, 'select' | 'include'> & {
      select?: Order_tableCountAggregateInputType | true
    }
  >

  export interface order_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Order_table that matches the filter.
     * @param {order_tableFindUniqueArgs} args - Arguments to find a Order_table
     * @example
     * // Get one Order_table
     * const order_table = await prisma.order_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends order_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, order_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'order_table'> extends True ? CheckSelect<T, Prisma__order_tableClient<order_table>, Prisma__order_tableClient<order_tableGetPayload<T>>> : CheckSelect<T, Prisma__order_tableClient<order_table | null >, Prisma__order_tableClient<order_tableGetPayload<T> | null >>

    /**
     * Find the first Order_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_tableFindFirstArgs} args - Arguments to find a Order_table
     * @example
     * // Get one Order_table
     * const order_table = await prisma.order_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends order_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, order_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'order_table'> extends True ? CheckSelect<T, Prisma__order_tableClient<order_table>, Prisma__order_tableClient<order_tableGetPayload<T>>> : CheckSelect<T, Prisma__order_tableClient<order_table | null >, Prisma__order_tableClient<order_tableGetPayload<T> | null >>

    /**
     * Find zero or more Order_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_tables
     * const order_tables = await prisma.order_table.findMany()
     * 
     * // Get first 10 Order_tables
     * const order_tables = await prisma.order_table.findMany({ take: 10 })
     * 
     * // Only select the `order_id`
     * const order_tableWithOrder_idOnly = await prisma.order_table.findMany({ select: { order_id: true } })
     * 
    **/
    findMany<T extends order_tableFindManyArgs>(
      args?: SelectSubset<T, order_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<order_table>>, PrismaPromise<Array<order_tableGetPayload<T>>>>

    /**
     * Create a Order_table.
     * @param {order_tableCreateArgs} args - Arguments to create a Order_table.
     * @example
     * // Create one Order_table
     * const Order_table = await prisma.order_table.create({
     *   data: {
     *     // ... data to create a Order_table
     *   }
     * })
     * 
    **/
    create<T extends order_tableCreateArgs>(
      args: SelectSubset<T, order_tableCreateArgs>
    ): CheckSelect<T, Prisma__order_tableClient<order_table>, Prisma__order_tableClient<order_tableGetPayload<T>>>

    /**
     * Create many Order_tables.
     *     @param {order_tableCreateManyArgs} args - Arguments to create many Order_tables.
     *     @example
     *     // Create many Order_tables
     *     const order_table = await prisma.order_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends order_tableCreateManyArgs>(
      args?: SelectSubset<T, order_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Order_table.
     * @param {order_tableDeleteArgs} args - Arguments to delete one Order_table.
     * @example
     * // Delete one Order_table
     * const Order_table = await prisma.order_table.delete({
     *   where: {
     *     // ... filter to delete one Order_table
     *   }
     * })
     * 
    **/
    delete<T extends order_tableDeleteArgs>(
      args: SelectSubset<T, order_tableDeleteArgs>
    ): CheckSelect<T, Prisma__order_tableClient<order_table>, Prisma__order_tableClient<order_tableGetPayload<T>>>

    /**
     * Update one Order_table.
     * @param {order_tableUpdateArgs} args - Arguments to update one Order_table.
     * @example
     * // Update one Order_table
     * const order_table = await prisma.order_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends order_tableUpdateArgs>(
      args: SelectSubset<T, order_tableUpdateArgs>
    ): CheckSelect<T, Prisma__order_tableClient<order_table>, Prisma__order_tableClient<order_tableGetPayload<T>>>

    /**
     * Delete zero or more Order_tables.
     * @param {order_tableDeleteManyArgs} args - Arguments to filter Order_tables to delete.
     * @example
     * // Delete a few Order_tables
     * const { count } = await prisma.order_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends order_tableDeleteManyArgs>(
      args?: SelectSubset<T, order_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_tables
     * const order_table = await prisma.order_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends order_tableUpdateManyArgs>(
      args: SelectSubset<T, order_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Order_table.
     * @param {order_tableUpsertArgs} args - Arguments to update or create a Order_table.
     * @example
     * // Update or create a Order_table
     * const order_table = await prisma.order_table.upsert({
     *   create: {
     *     // ... data to create a Order_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_table we want to update
     *   }
     * })
    **/
    upsert<T extends order_tableUpsertArgs>(
      args: SelectSubset<T, order_tableUpsertArgs>
    ): CheckSelect<T, Prisma__order_tableClient<order_table>, Prisma__order_tableClient<order_tableGetPayload<T>>>

    /**
     * Count the number of Order_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_tableCountArgs} args - Arguments to filter Order_tables to count.
     * @example
     * // Count the number of Order_tables
     * const count = await prisma.order_table.count({
     *   where: {
     *     // ... the filter for the Order_tables we want to count
     *   }
     * })
    **/
    count<T extends order_tableCountArgs>(
      args?: Subset<T, order_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_tableAggregateArgs>(args: Subset<T, Order_tableAggregateArgs>): PrismaPromise<GetOrder_tableAggregateType<T>>

    /**
     * Group by Order_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Order_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Order_tableGroupByArgs['orderBy'] }
        : { orderBy?: Order_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Order_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_tableGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for order_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__order_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    inventory<T extends inventory_tableFindManyArgs = {}>(args?: Subset<T, inventory_tableFindManyArgs>): CheckSelect<T, PrismaPromise<Array<inventory_table>>, PrismaPromise<Array<inventory_tableGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * order_table findUnique
   */
  export type order_tableFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the order_table
     * 
    **/
    select?: order_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: order_tableInclude | null
    /**
     * Throw an Error if a order_table can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which order_table to fetch.
     * 
    **/
    where: order_tableWhereUniqueInput
  }


  /**
   * order_table findFirst
   */
  export type order_tableFindFirstArgs = {
    /**
     * Select specific fields to fetch from the order_table
     * 
    **/
    select?: order_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: order_tableInclude | null
    /**
     * Throw an Error if a order_table can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which order_table to fetch.
     * 
    **/
    where?: order_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<order_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_tables.
     * 
    **/
    cursor?: order_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_tables.
     * 
    **/
    distinct?: Enumerable<Order_tableScalarFieldEnum>
  }


  /**
   * order_table findMany
   */
  export type order_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the order_table
     * 
    **/
    select?: order_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: order_tableInclude | null
    /**
     * Filter, which order_tables to fetch.
     * 
    **/
    where?: order_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<order_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing order_tables.
     * 
    **/
    cursor?: order_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Order_tableScalarFieldEnum>
  }


  /**
   * order_table create
   */
  export type order_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the order_table
     * 
    **/
    select?: order_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: order_tableInclude | null
    /**
     * The data needed to create a order_table.
     * 
    **/
    data: XOR<order_tableCreateInput, order_tableUncheckedCreateInput>
  }


  /**
   * order_table createMany
   */
  export type order_tableCreateManyArgs = {
    data: Enumerable<order_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * order_table update
   */
  export type order_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the order_table
     * 
    **/
    select?: order_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: order_tableInclude | null
    /**
     * The data needed to update a order_table.
     * 
    **/
    data: XOR<order_tableUpdateInput, order_tableUncheckedUpdateInput>
    /**
     * Choose, which order_table to update.
     * 
    **/
    where: order_tableWhereUniqueInput
  }


  /**
   * order_table updateMany
   */
  export type order_tableUpdateManyArgs = {
    data: XOR<order_tableUpdateManyMutationInput, order_tableUncheckedUpdateManyInput>
    where?: order_tableWhereInput
  }


  /**
   * order_table upsert
   */
  export type order_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the order_table
     * 
    **/
    select?: order_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: order_tableInclude | null
    /**
     * The filter to search for the order_table to update in case it exists.
     * 
    **/
    where: order_tableWhereUniqueInput
    /**
     * In case the order_table found by the `where` argument doesn't exist, create a new order_table with this data.
     * 
    **/
    create: XOR<order_tableCreateInput, order_tableUncheckedCreateInput>
    /**
     * In case the order_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<order_tableUpdateInput, order_tableUncheckedUpdateInput>
  }


  /**
   * order_table delete
   */
  export type order_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the order_table
     * 
    **/
    select?: order_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: order_tableInclude | null
    /**
     * Filter which order_table to delete.
     * 
    **/
    where: order_tableWhereUniqueInput
  }


  /**
   * order_table deleteMany
   */
  export type order_tableDeleteManyArgs = {
    where?: order_tableWhereInput
  }


  /**
   * order_table without action
   */
  export type order_tableArgs = {
    /**
     * Select specific fields to fetch from the order_table
     * 
    **/
    select?: order_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: order_tableInclude | null
  }



  /**
   * Model inventory_table
   */


  export type AggregateInventory_table = {
    _count: Inventory_tableCountAggregateOutputType | null
    _avg: Inventory_tableAvgAggregateOutputType | null
    _sum: Inventory_tableSumAggregateOutputType | null
    _min: Inventory_tableMinAggregateOutputType | null
    _max: Inventory_tableMaxAggregateOutputType | null
  }

  export type Inventory_tableAvgAggregateOutputType = {
    inventory_id: number | null
    product_id: number | null
    order_id: number | null
    inventory_price: number | null
    product_brand_id: number | null
    inventory_quantity: number | null
    agent_id: number | null
  }

  export type Inventory_tableSumAggregateOutputType = {
    inventory_id: number | null
    product_id: number | null
    order_id: number | null
    inventory_price: number | null
    product_brand_id: number | null
    inventory_quantity: number | null
    agent_id: number | null
  }

  export type Inventory_tableMinAggregateOutputType = {
    inventory_id: number | null
    product_id: number | null
    order_id: number | null
    inventory_price: number | null
    currency: string | null
    product_brand_id: number | null
    date_created: Date | null
    inventory_quantity: number | null
    last_updated: Date | null
    agent_id: number | null
  }

  export type Inventory_tableMaxAggregateOutputType = {
    inventory_id: number | null
    product_id: number | null
    order_id: number | null
    inventory_price: number | null
    currency: string | null
    product_brand_id: number | null
    date_created: Date | null
    inventory_quantity: number | null
    last_updated: Date | null
    agent_id: number | null
  }

  export type Inventory_tableCountAggregateOutputType = {
    inventory_id: number
    product_id: number
    order_id: number
    inventory_price: number
    currency: number
    product_brand_id: number
    date_created: number
    inventory_quantity: number
    last_updated: number
    agent_id: number
    product_mouvement: number
    _all: number
  }


  export type Inventory_tableAvgAggregateInputType = {
    inventory_id?: true
    product_id?: true
    order_id?: true
    inventory_price?: true
    product_brand_id?: true
    inventory_quantity?: true
    agent_id?: true
  }

  export type Inventory_tableSumAggregateInputType = {
    inventory_id?: true
    product_id?: true
    order_id?: true
    inventory_price?: true
    product_brand_id?: true
    inventory_quantity?: true
    agent_id?: true
  }

  export type Inventory_tableMinAggregateInputType = {
    inventory_id?: true
    product_id?: true
    order_id?: true
    inventory_price?: true
    currency?: true
    product_brand_id?: true
    date_created?: true
    inventory_quantity?: true
    last_updated?: true
    agent_id?: true
  }

  export type Inventory_tableMaxAggregateInputType = {
    inventory_id?: true
    product_id?: true
    order_id?: true
    inventory_price?: true
    currency?: true
    product_brand_id?: true
    date_created?: true
    inventory_quantity?: true
    last_updated?: true
    agent_id?: true
  }

  export type Inventory_tableCountAggregateInputType = {
    inventory_id?: true
    product_id?: true
    order_id?: true
    inventory_price?: true
    currency?: true
    product_brand_id?: true
    date_created?: true
    inventory_quantity?: true
    last_updated?: true
    agent_id?: true
    product_mouvement?: true
    _all?: true
  }

  export type Inventory_tableAggregateArgs = {
    /**
     * Filter which inventory_table to aggregate.
     * 
    **/
    where?: inventory_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventory_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<inventory_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: inventory_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventory_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventory_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inventory_tables
    **/
    _count?: true | Inventory_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inventory_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inventory_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inventory_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inventory_tableMaxAggregateInputType
  }

  export type GetInventory_tableAggregateType<T extends Inventory_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory_table[P]>
      : GetScalarType<T[P], AggregateInventory_table[P]>
  }


    
    
  export type Inventory_tableGroupByArgs = {
    where?: inventory_tableWhereInput
    orderBy?: Enumerable<inventory_tableOrderByWithAggregationInput>
    by: Array<Inventory_tableScalarFieldEnum>
    having?: inventory_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inventory_tableCountAggregateInputType | true
    _avg?: Inventory_tableAvgAggregateInputType
    _sum?: Inventory_tableSumAggregateInputType
    _min?: Inventory_tableMinAggregateInputType
    _max?: Inventory_tableMaxAggregateInputType
  }


  export type Inventory_tableGroupByOutputType = {
    inventory_id: number
    product_id: number
    order_id: number | null
    inventory_price: number
    currency: string | null
    product_brand_id: number
    date_created: Date | null
    inventory_quantity: number
    last_updated: Date
    agent_id: number | null
    product_mouvement: JsonValue | null
    _count: Inventory_tableCountAggregateOutputType | null
    _avg: Inventory_tableAvgAggregateOutputType | null
    _sum: Inventory_tableSumAggregateOutputType | null
    _min: Inventory_tableMinAggregateOutputType | null
    _max: Inventory_tableMaxAggregateOutputType | null
  }

  type GetInventory_tableGroupByPayload<T extends Inventory_tableGroupByArgs> = Promise<
    Array<
      PickArray<Inventory_tableGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Inventory_tableGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Inventory_tableGroupByOutputType[P]> 
            : GetScalarType<T[P], Inventory_tableGroupByOutputType[P]>
        }
      > 
    >


  export type inventory_tableSelect = {
    inventory_id?: boolean
    product_id?: boolean
    order_id?: boolean
    inventory_price?: boolean
    currency?: boolean
    product_brand_id?: boolean
    date_created?: boolean
    inventory_quantity?: boolean
    last_updated?: boolean
    agent_id?: boolean
    product_mouvement?: boolean
    brand?: boolean | brand_tableArgs
    product?: boolean | product_tableArgs
    order?: boolean | order_tableArgs
  }

  export type inventory_tableInclude = {
    brand?: boolean | brand_tableArgs
    product?: boolean | product_tableArgs
    order?: boolean | order_tableArgs
  }

  export type inventory_tableGetPayload<
    S extends boolean | null | undefined | inventory_tableArgs,
    U = keyof S
      > = S extends true
        ? inventory_table
    : S extends undefined
    ? never
    : S extends inventory_tableArgs | inventory_tableFindManyArgs
    ?'include' extends U
    ? inventory_table  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'brand'
        ? brand_tableGetPayload<S['include'][P]> :
        P extends 'product'
        ? product_tableGetPayload<S['include'][P]> :
        P extends 'order'
        ? order_tableGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof inventory_table ?inventory_table [P]
  : 
          P extends 'brand'
        ? brand_tableGetPayload<S['select'][P]> :
        P extends 'product'
        ? product_tableGetPayload<S['select'][P]> :
        P extends 'order'
        ? order_tableGetPayload<S['select'][P]> | null : never
  } 
    : inventory_table
  : inventory_table


  type inventory_tableCountArgs = Merge<
    Omit<inventory_tableFindManyArgs, 'select' | 'include'> & {
      select?: Inventory_tableCountAggregateInputType | true
    }
  >

  export interface inventory_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Inventory_table that matches the filter.
     * @param {inventory_tableFindUniqueArgs} args - Arguments to find a Inventory_table
     * @example
     * // Get one Inventory_table
     * const inventory_table = await prisma.inventory_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inventory_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, inventory_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'inventory_table'> extends True ? CheckSelect<T, Prisma__inventory_tableClient<inventory_table>, Prisma__inventory_tableClient<inventory_tableGetPayload<T>>> : CheckSelect<T, Prisma__inventory_tableClient<inventory_table | null >, Prisma__inventory_tableClient<inventory_tableGetPayload<T> | null >>

    /**
     * Find the first Inventory_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventory_tableFindFirstArgs} args - Arguments to find a Inventory_table
     * @example
     * // Get one Inventory_table
     * const inventory_table = await prisma.inventory_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inventory_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, inventory_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'inventory_table'> extends True ? CheckSelect<T, Prisma__inventory_tableClient<inventory_table>, Prisma__inventory_tableClient<inventory_tableGetPayload<T>>> : CheckSelect<T, Prisma__inventory_tableClient<inventory_table | null >, Prisma__inventory_tableClient<inventory_tableGetPayload<T> | null >>

    /**
     * Find zero or more Inventory_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventory_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventory_tables
     * const inventory_tables = await prisma.inventory_table.findMany()
     * 
     * // Get first 10 Inventory_tables
     * const inventory_tables = await prisma.inventory_table.findMany({ take: 10 })
     * 
     * // Only select the `inventory_id`
     * const inventory_tableWithInventory_idOnly = await prisma.inventory_table.findMany({ select: { inventory_id: true } })
     * 
    **/
    findMany<T extends inventory_tableFindManyArgs>(
      args?: SelectSubset<T, inventory_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<inventory_table>>, PrismaPromise<Array<inventory_tableGetPayload<T>>>>

    /**
     * Create a Inventory_table.
     * @param {inventory_tableCreateArgs} args - Arguments to create a Inventory_table.
     * @example
     * // Create one Inventory_table
     * const Inventory_table = await prisma.inventory_table.create({
     *   data: {
     *     // ... data to create a Inventory_table
     *   }
     * })
     * 
    **/
    create<T extends inventory_tableCreateArgs>(
      args: SelectSubset<T, inventory_tableCreateArgs>
    ): CheckSelect<T, Prisma__inventory_tableClient<inventory_table>, Prisma__inventory_tableClient<inventory_tableGetPayload<T>>>

    /**
     * Create many Inventory_tables.
     *     @param {inventory_tableCreateManyArgs} args - Arguments to create many Inventory_tables.
     *     @example
     *     // Create many Inventory_tables
     *     const inventory_table = await prisma.inventory_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends inventory_tableCreateManyArgs>(
      args?: SelectSubset<T, inventory_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Inventory_table.
     * @param {inventory_tableDeleteArgs} args - Arguments to delete one Inventory_table.
     * @example
     * // Delete one Inventory_table
     * const Inventory_table = await prisma.inventory_table.delete({
     *   where: {
     *     // ... filter to delete one Inventory_table
     *   }
     * })
     * 
    **/
    delete<T extends inventory_tableDeleteArgs>(
      args: SelectSubset<T, inventory_tableDeleteArgs>
    ): CheckSelect<T, Prisma__inventory_tableClient<inventory_table>, Prisma__inventory_tableClient<inventory_tableGetPayload<T>>>

    /**
     * Update one Inventory_table.
     * @param {inventory_tableUpdateArgs} args - Arguments to update one Inventory_table.
     * @example
     * // Update one Inventory_table
     * const inventory_table = await prisma.inventory_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inventory_tableUpdateArgs>(
      args: SelectSubset<T, inventory_tableUpdateArgs>
    ): CheckSelect<T, Prisma__inventory_tableClient<inventory_table>, Prisma__inventory_tableClient<inventory_tableGetPayload<T>>>

    /**
     * Delete zero or more Inventory_tables.
     * @param {inventory_tableDeleteManyArgs} args - Arguments to filter Inventory_tables to delete.
     * @example
     * // Delete a few Inventory_tables
     * const { count } = await prisma.inventory_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inventory_tableDeleteManyArgs>(
      args?: SelectSubset<T, inventory_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventory_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventory_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventory_tables
     * const inventory_table = await prisma.inventory_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inventory_tableUpdateManyArgs>(
      args: SelectSubset<T, inventory_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Inventory_table.
     * @param {inventory_tableUpsertArgs} args - Arguments to update or create a Inventory_table.
     * @example
     * // Update or create a Inventory_table
     * const inventory_table = await prisma.inventory_table.upsert({
     *   create: {
     *     // ... data to create a Inventory_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory_table we want to update
     *   }
     * })
    **/
    upsert<T extends inventory_tableUpsertArgs>(
      args: SelectSubset<T, inventory_tableUpsertArgs>
    ): CheckSelect<T, Prisma__inventory_tableClient<inventory_table>, Prisma__inventory_tableClient<inventory_tableGetPayload<T>>>

    /**
     * Count the number of Inventory_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventory_tableCountArgs} args - Arguments to filter Inventory_tables to count.
     * @example
     * // Count the number of Inventory_tables
     * const count = await prisma.inventory_table.count({
     *   where: {
     *     // ... the filter for the Inventory_tables we want to count
     *   }
     * })
    **/
    count<T extends inventory_tableCountArgs>(
      args?: Subset<T, inventory_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inventory_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inventory_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inventory_tableAggregateArgs>(args: Subset<T, Inventory_tableAggregateArgs>): PrismaPromise<GetInventory_tableAggregateType<T>>

    /**
     * Group by Inventory_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inventory_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Inventory_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Inventory_tableGroupByArgs['orderBy'] }
        : { orderBy?: Inventory_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Inventory_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventory_tableGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for inventory_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__inventory_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    brand<T extends brand_tableArgs = {}>(args?: Subset<T, brand_tableArgs>): CheckSelect<T, Prisma__brand_tableClient<brand_table | null >, Prisma__brand_tableClient<brand_tableGetPayload<T> | null >>;

    product<T extends product_tableArgs = {}>(args?: Subset<T, product_tableArgs>): CheckSelect<T, Prisma__product_tableClient<product_table | null >, Prisma__product_tableClient<product_tableGetPayload<T> | null >>;

    order<T extends order_tableArgs = {}>(args?: Subset<T, order_tableArgs>): CheckSelect<T, Prisma__order_tableClient<order_table | null >, Prisma__order_tableClient<order_tableGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * inventory_table findUnique
   */
  export type inventory_tableFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the inventory_table
     * 
    **/
    select?: inventory_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inventory_tableInclude | null
    /**
     * Throw an Error if a inventory_table can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inventory_table to fetch.
     * 
    **/
    where: inventory_tableWhereUniqueInput
  }


  /**
   * inventory_table findFirst
   */
  export type inventory_tableFindFirstArgs = {
    /**
     * Select specific fields to fetch from the inventory_table
     * 
    **/
    select?: inventory_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inventory_tableInclude | null
    /**
     * Throw an Error if a inventory_table can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inventory_table to fetch.
     * 
    **/
    where?: inventory_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventory_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<inventory_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inventory_tables.
     * 
    **/
    cursor?: inventory_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventory_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventory_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inventory_tables.
     * 
    **/
    distinct?: Enumerable<Inventory_tableScalarFieldEnum>
  }


  /**
   * inventory_table findMany
   */
  export type inventory_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the inventory_table
     * 
    **/
    select?: inventory_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inventory_tableInclude | null
    /**
     * Filter, which inventory_tables to fetch.
     * 
    **/
    where?: inventory_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventory_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<inventory_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inventory_tables.
     * 
    **/
    cursor?: inventory_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventory_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventory_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Inventory_tableScalarFieldEnum>
  }


  /**
   * inventory_table create
   */
  export type inventory_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the inventory_table
     * 
    **/
    select?: inventory_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inventory_tableInclude | null
    /**
     * The data needed to create a inventory_table.
     * 
    **/
    data: XOR<inventory_tableCreateInput, inventory_tableUncheckedCreateInput>
  }


  /**
   * inventory_table createMany
   */
  export type inventory_tableCreateManyArgs = {
    data: Enumerable<inventory_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * inventory_table update
   */
  export type inventory_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the inventory_table
     * 
    **/
    select?: inventory_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inventory_tableInclude | null
    /**
     * The data needed to update a inventory_table.
     * 
    **/
    data: XOR<inventory_tableUpdateInput, inventory_tableUncheckedUpdateInput>
    /**
     * Choose, which inventory_table to update.
     * 
    **/
    where: inventory_tableWhereUniqueInput
  }


  /**
   * inventory_table updateMany
   */
  export type inventory_tableUpdateManyArgs = {
    data: XOR<inventory_tableUpdateManyMutationInput, inventory_tableUncheckedUpdateManyInput>
    where?: inventory_tableWhereInput
  }


  /**
   * inventory_table upsert
   */
  export type inventory_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the inventory_table
     * 
    **/
    select?: inventory_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inventory_tableInclude | null
    /**
     * The filter to search for the inventory_table to update in case it exists.
     * 
    **/
    where: inventory_tableWhereUniqueInput
    /**
     * In case the inventory_table found by the `where` argument doesn't exist, create a new inventory_table with this data.
     * 
    **/
    create: XOR<inventory_tableCreateInput, inventory_tableUncheckedCreateInput>
    /**
     * In case the inventory_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<inventory_tableUpdateInput, inventory_tableUncheckedUpdateInput>
  }


  /**
   * inventory_table delete
   */
  export type inventory_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the inventory_table
     * 
    **/
    select?: inventory_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inventory_tableInclude | null
    /**
     * Filter which inventory_table to delete.
     * 
    **/
    where: inventory_tableWhereUniqueInput
  }


  /**
   * inventory_table deleteMany
   */
  export type inventory_tableDeleteManyArgs = {
    where?: inventory_tableWhereInput
  }


  /**
   * inventory_table without action
   */
  export type inventory_tableArgs = {
    /**
     * Select specific fields to fetch from the inventory_table
     * 
    **/
    select?: inventory_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inventory_tableInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Product_tableScalarFieldEnum: {
    product_id: 'product_id',
    product_ref: 'product_ref',
    product_name: 'product_name',
    product_brand_id: 'product_brand_id',
    product_category: 'product_category',
    product_price: 'product_price',
    product_gen_description: 'product_gen_description',
    product_gen_characteristic: 'product_gen_characteristic',
    date_created: 'date_created',
    product_factory_price: 'product_factory_price',
    currency: 'currency',
    product_weight: 'product_weight',
    product_coutry_of_origin: 'product_coutry_of_origin',
    product_sell_unit: 'product_sell_unit',
    product_box_weight: 'product_box_weight',
    product_sku: 'product_sku',
    product_min_quanity: 'product_min_quanity',
    product_volume: 'product_volume',
    product_custom_border_id: 'product_custom_border_id',
    product_box_quantity: 'product_box_quantity',
    product_box_volume: 'product_box_volume',
    product_img: 'product_img'
  };

  export type Product_tableScalarFieldEnum = (typeof Product_tableScalarFieldEnum)[keyof typeof Product_tableScalarFieldEnum]


  export const Brand_tableScalarFieldEnum: {
    brand_id: 'brand_id',
    brand_name: 'brand_name',
    brand_country_of_origin: 'brand_country_of_origin',
    industry: 'industry',
    brand_img: 'brand_img',
    date_created: 'date_created'
  };

  export type Brand_tableScalarFieldEnum = (typeof Brand_tableScalarFieldEnum)[keyof typeof Brand_tableScalarFieldEnum]


  export const Order_tableScalarFieldEnum: {
    order_id: 'order_id',
    order_product_list: 'order_product_list',
    order_import_cost: 'order_import_cost',
    order_tax_cost: 'order_tax_cost',
    order_total_cost: 'order_total_cost',
    currency: 'currency',
    order_is_incomming: 'order_is_incomming',
    order_emmitted_date: 'order_emmitted_date',
    order_delivery_date: 'order_delivery_date',
    order_is_delivered: 'order_is_delivered'
  };

  export type Order_tableScalarFieldEnum = (typeof Order_tableScalarFieldEnum)[keyof typeof Order_tableScalarFieldEnum]


  export const Inventory_tableScalarFieldEnum: {
    inventory_id: 'inventory_id',
    product_id: 'product_id',
    order_id: 'order_id',
    inventory_price: 'inventory_price',
    currency: 'currency',
    product_brand_id: 'product_brand_id',
    date_created: 'date_created',
    inventory_quantity: 'inventory_quantity',
    last_updated: 'last_updated',
    agent_id: 'agent_id',
    product_mouvement: 'product_mouvement'
  };

  export type Inventory_tableScalarFieldEnum = (typeof Inventory_tableScalarFieldEnum)[keyof typeof Inventory_tableScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: 'JsonNull'
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type product_tableWhereInput = {
    AND?: Enumerable<product_tableWhereInput>
    OR?: Enumerable<product_tableWhereInput>
    NOT?: Enumerable<product_tableWhereInput>
    product_id?: IntFilter | number
    product_ref?: StringFilter | string
    product_name?: StringFilter | string
    product_brand_id?: IntFilter | number
    product_category?: StringNullableFilter | string | null
    product_price?: IntNullableFilter | number | null
    product_gen_description?: StringNullableFilter | string | null
    product_gen_characteristic?: StringNullableFilter | string | null
    date_created?: DateTimeFilter | Date | string
    product_factory_price?: IntNullableFilter | number | null
    currency?: StringNullableFilter | string | null
    product_weight?: IntNullableFilter | number | null
    product_coutry_of_origin?: StringNullableFilter | string | null
    product_sell_unit?: StringNullableFilter | string | null
    product_box_weight?: IntNullableFilter | number | null
    product_sku?: StringNullableFilter | string | null
    product_min_quanity?: IntNullableFilter | number | null
    product_volume?: IntNullableFilter | number | null
    product_custom_border_id?: StringNullableFilter | string | null
    product_box_quantity?: IntNullableFilter | number | null
    product_box_volume?: IntNullableFilter | number | null
    product_img?: StringNullableFilter | string | null
    brand?: XOR<Brand_tableRelationFilter, brand_tableWhereInput>
    inventory?: Inventory_tableListRelationFilter
  }

  export type product_tableOrderByWithRelationInput = {
    product_id?: SortOrder
    product_ref?: SortOrder
    product_name?: SortOrder
    product_brand_id?: SortOrder
    product_category?: SortOrder
    product_price?: SortOrder
    product_gen_description?: SortOrder
    product_gen_characteristic?: SortOrder
    date_created?: SortOrder
    product_factory_price?: SortOrder
    currency?: SortOrder
    product_weight?: SortOrder
    product_coutry_of_origin?: SortOrder
    product_sell_unit?: SortOrder
    product_box_weight?: SortOrder
    product_sku?: SortOrder
    product_min_quanity?: SortOrder
    product_volume?: SortOrder
    product_custom_border_id?: SortOrder
    product_box_quantity?: SortOrder
    product_box_volume?: SortOrder
    product_img?: SortOrder
    brand?: brand_tableOrderByWithRelationInput
    inventory?: inventory_tableOrderByRelationAggregateInput
  }

  export type product_tableWhereUniqueInput = {
    product_id?: number
    product_ref?: string
    product_sku?: string
    product_custom_border_id?: string
  }

  export type product_tableOrderByWithAggregationInput = {
    product_id?: SortOrder
    product_ref?: SortOrder
    product_name?: SortOrder
    product_brand_id?: SortOrder
    product_category?: SortOrder
    product_price?: SortOrder
    product_gen_description?: SortOrder
    product_gen_characteristic?: SortOrder
    date_created?: SortOrder
    product_factory_price?: SortOrder
    currency?: SortOrder
    product_weight?: SortOrder
    product_coutry_of_origin?: SortOrder
    product_sell_unit?: SortOrder
    product_box_weight?: SortOrder
    product_sku?: SortOrder
    product_min_quanity?: SortOrder
    product_volume?: SortOrder
    product_custom_border_id?: SortOrder
    product_box_quantity?: SortOrder
    product_box_volume?: SortOrder
    product_img?: SortOrder
    _count?: product_tableCountOrderByAggregateInput
    _avg?: product_tableAvgOrderByAggregateInput
    _max?: product_tableMaxOrderByAggregateInput
    _min?: product_tableMinOrderByAggregateInput
    _sum?: product_tableSumOrderByAggregateInput
  }

  export type product_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<product_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<product_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<product_tableScalarWhereWithAggregatesInput>
    product_id?: IntWithAggregatesFilter | number
    product_ref?: StringWithAggregatesFilter | string
    product_name?: StringWithAggregatesFilter | string
    product_brand_id?: IntWithAggregatesFilter | number
    product_category?: StringNullableWithAggregatesFilter | string | null
    product_price?: IntNullableWithAggregatesFilter | number | null
    product_gen_description?: StringNullableWithAggregatesFilter | string | null
    product_gen_characteristic?: StringNullableWithAggregatesFilter | string | null
    date_created?: DateTimeWithAggregatesFilter | Date | string
    product_factory_price?: IntNullableWithAggregatesFilter | number | null
    currency?: StringNullableWithAggregatesFilter | string | null
    product_weight?: IntNullableWithAggregatesFilter | number | null
    product_coutry_of_origin?: StringNullableWithAggregatesFilter | string | null
    product_sell_unit?: StringNullableWithAggregatesFilter | string | null
    product_box_weight?: IntNullableWithAggregatesFilter | number | null
    product_sku?: StringNullableWithAggregatesFilter | string | null
    product_min_quanity?: IntNullableWithAggregatesFilter | number | null
    product_volume?: IntNullableWithAggregatesFilter | number | null
    product_custom_border_id?: StringNullableWithAggregatesFilter | string | null
    product_box_quantity?: IntNullableWithAggregatesFilter | number | null
    product_box_volume?: IntNullableWithAggregatesFilter | number | null
    product_img?: StringNullableWithAggregatesFilter | string | null
  }

  export type brand_tableWhereInput = {
    AND?: Enumerable<brand_tableWhereInput>
    OR?: Enumerable<brand_tableWhereInput>
    NOT?: Enumerable<brand_tableWhereInput>
    brand_id?: IntFilter | number
    brand_name?: StringFilter | string
    brand_country_of_origin?: StringNullableFilter | string | null
    industry?: StringNullableFilter | string | null
    brand_img?: StringNullableFilter | string | null
    date_created?: DateTimeFilter | Date | string
    product?: Product_tableListRelationFilter
    inventory?: Inventory_tableListRelationFilter
  }

  export type brand_tableOrderByWithRelationInput = {
    brand_id?: SortOrder
    brand_name?: SortOrder
    brand_country_of_origin?: SortOrder
    industry?: SortOrder
    brand_img?: SortOrder
    date_created?: SortOrder
    product?: product_tableOrderByRelationAggregateInput
    inventory?: inventory_tableOrderByRelationAggregateInput
  }

  export type brand_tableWhereUniqueInput = {
    brand_id?: number
    brand_name?: string
  }

  export type brand_tableOrderByWithAggregationInput = {
    brand_id?: SortOrder
    brand_name?: SortOrder
    brand_country_of_origin?: SortOrder
    industry?: SortOrder
    brand_img?: SortOrder
    date_created?: SortOrder
    _count?: brand_tableCountOrderByAggregateInput
    _avg?: brand_tableAvgOrderByAggregateInput
    _max?: brand_tableMaxOrderByAggregateInput
    _min?: brand_tableMinOrderByAggregateInput
    _sum?: brand_tableSumOrderByAggregateInput
  }

  export type brand_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<brand_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<brand_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<brand_tableScalarWhereWithAggregatesInput>
    brand_id?: IntWithAggregatesFilter | number
    brand_name?: StringWithAggregatesFilter | string
    brand_country_of_origin?: StringNullableWithAggregatesFilter | string | null
    industry?: StringNullableWithAggregatesFilter | string | null
    brand_img?: StringNullableWithAggregatesFilter | string | null
    date_created?: DateTimeWithAggregatesFilter | Date | string
  }

  export type order_tableWhereInput = {
    AND?: Enumerable<order_tableWhereInput>
    OR?: Enumerable<order_tableWhereInput>
    NOT?: Enumerable<order_tableWhereInput>
    order_id?: IntFilter | number
    order_product_list?: JsonFilter
    order_import_cost?: IntNullableFilter | number | null
    order_tax_cost?: IntNullableFilter | number | null
    order_total_cost?: IntNullableFilter | number | null
    currency?: StringNullableFilter | string | null
    order_is_incomming?: BoolNullableFilter | boolean | null
    order_emmitted_date?: DateTimeNullableFilter | Date | string | null
    order_delivery_date?: DateTimeNullableFilter | Date | string | null
    order_is_delivered?: BoolNullableFilter | boolean | null
    inventory?: Inventory_tableListRelationFilter
  }

  export type order_tableOrderByWithRelationInput = {
    order_id?: SortOrder
    order_product_list?: SortOrder
    order_import_cost?: SortOrder
    order_tax_cost?: SortOrder
    order_total_cost?: SortOrder
    currency?: SortOrder
    order_is_incomming?: SortOrder
    order_emmitted_date?: SortOrder
    order_delivery_date?: SortOrder
    order_is_delivered?: SortOrder
    inventory?: inventory_tableOrderByRelationAggregateInput
  }

  export type order_tableWhereUniqueInput = {
    order_id?: number
  }

  export type order_tableOrderByWithAggregationInput = {
    order_id?: SortOrder
    order_product_list?: SortOrder
    order_import_cost?: SortOrder
    order_tax_cost?: SortOrder
    order_total_cost?: SortOrder
    currency?: SortOrder
    order_is_incomming?: SortOrder
    order_emmitted_date?: SortOrder
    order_delivery_date?: SortOrder
    order_is_delivered?: SortOrder
    _count?: order_tableCountOrderByAggregateInput
    _avg?: order_tableAvgOrderByAggregateInput
    _max?: order_tableMaxOrderByAggregateInput
    _min?: order_tableMinOrderByAggregateInput
    _sum?: order_tableSumOrderByAggregateInput
  }

  export type order_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<order_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<order_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<order_tableScalarWhereWithAggregatesInput>
    order_id?: IntWithAggregatesFilter | number
    order_product_list?: JsonWithAggregatesFilter
    order_import_cost?: IntNullableWithAggregatesFilter | number | null
    order_tax_cost?: IntNullableWithAggregatesFilter | number | null
    order_total_cost?: IntNullableWithAggregatesFilter | number | null
    currency?: StringNullableWithAggregatesFilter | string | null
    order_is_incomming?: BoolNullableWithAggregatesFilter | boolean | null
    order_emmitted_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    order_delivery_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    order_is_delivered?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type inventory_tableWhereInput = {
    AND?: Enumerable<inventory_tableWhereInput>
    OR?: Enumerable<inventory_tableWhereInput>
    NOT?: Enumerable<inventory_tableWhereInput>
    inventory_id?: IntFilter | number
    product_id?: IntFilter | number
    order_id?: IntNullableFilter | number | null
    inventory_price?: IntFilter | number
    currency?: StringNullableFilter | string | null
    product_brand_id?: IntFilter | number
    date_created?: DateTimeNullableFilter | Date | string | null
    inventory_quantity?: IntFilter | number
    last_updated?: DateTimeFilter | Date | string
    agent_id?: IntNullableFilter | number | null
    product_mouvement?: JsonNullableFilter
    brand?: XOR<Brand_tableRelationFilter, brand_tableWhereInput>
    product?: XOR<Product_tableRelationFilter, product_tableWhereInput>
    order?: XOR<Order_tableRelationFilter, order_tableWhereInput> | null
  }

  export type inventory_tableOrderByWithRelationInput = {
    inventory_id?: SortOrder
    product_id?: SortOrder
    order_id?: SortOrder
    inventory_price?: SortOrder
    currency?: SortOrder
    product_brand_id?: SortOrder
    date_created?: SortOrder
    inventory_quantity?: SortOrder
    last_updated?: SortOrder
    agent_id?: SortOrder
    product_mouvement?: SortOrder
    brand?: brand_tableOrderByWithRelationInput
    product?: product_tableOrderByWithRelationInput
    order?: order_tableOrderByWithRelationInput
  }

  export type inventory_tableWhereUniqueInput = {
    inventory_id?: number
    product_id?: number
  }

  export type inventory_tableOrderByWithAggregationInput = {
    inventory_id?: SortOrder
    product_id?: SortOrder
    order_id?: SortOrder
    inventory_price?: SortOrder
    currency?: SortOrder
    product_brand_id?: SortOrder
    date_created?: SortOrder
    inventory_quantity?: SortOrder
    last_updated?: SortOrder
    agent_id?: SortOrder
    product_mouvement?: SortOrder
    _count?: inventory_tableCountOrderByAggregateInput
    _avg?: inventory_tableAvgOrderByAggregateInput
    _max?: inventory_tableMaxOrderByAggregateInput
    _min?: inventory_tableMinOrderByAggregateInput
    _sum?: inventory_tableSumOrderByAggregateInput
  }

  export type inventory_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<inventory_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<inventory_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<inventory_tableScalarWhereWithAggregatesInput>
    inventory_id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    order_id?: IntNullableWithAggregatesFilter | number | null
    inventory_price?: IntWithAggregatesFilter | number
    currency?: StringNullableWithAggregatesFilter | string | null
    product_brand_id?: IntWithAggregatesFilter | number
    date_created?: DateTimeNullableWithAggregatesFilter | Date | string | null
    inventory_quantity?: IntWithAggregatesFilter | number
    last_updated?: DateTimeWithAggregatesFilter | Date | string
    agent_id?: IntNullableWithAggregatesFilter | number | null
    product_mouvement?: JsonNullableWithAggregatesFilter
  }

  export type product_tableCreateInput = {
    product_ref: string
    product_name: string
    product_category?: string | null
    product_price?: number | null
    product_gen_description?: string | null
    product_gen_characteristic?: string | null
    date_created?: Date | string
    product_factory_price?: number | null
    currency?: string | null
    product_weight?: number | null
    product_coutry_of_origin?: string | null
    product_sell_unit?: string | null
    product_box_weight?: number | null
    product_sku?: string | null
    product_min_quanity?: number | null
    product_volume?: number | null
    product_custom_border_id?: string | null
    product_box_quantity?: number | null
    product_box_volume?: number | null
    product_img?: string | null
    brand: brand_tableCreateNestedOneWithoutProductInput
    inventory?: inventory_tableCreateNestedManyWithoutProductInput
  }

  export type product_tableUncheckedCreateInput = {
    product_id?: number
    product_ref: string
    product_name: string
    product_brand_id: number
    product_category?: string | null
    product_price?: number | null
    product_gen_description?: string | null
    product_gen_characteristic?: string | null
    date_created?: Date | string
    product_factory_price?: number | null
    currency?: string | null
    product_weight?: number | null
    product_coutry_of_origin?: string | null
    product_sell_unit?: string | null
    product_box_weight?: number | null
    product_sku?: string | null
    product_min_quanity?: number | null
    product_volume?: number | null
    product_custom_border_id?: string | null
    product_box_quantity?: number | null
    product_box_volume?: number | null
    product_img?: string | null
    inventory?: inventory_tableUncheckedCreateNestedManyWithoutProductInput
  }

  export type product_tableUpdateInput = {
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: brand_tableUpdateOneRequiredWithoutProductInput
    inventory?: inventory_tableUpdateManyWithoutProductInput
  }

  export type product_tableUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_brand_id?: IntFieldUpdateOperationsInput | number
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: inventory_tableUncheckedUpdateManyWithoutProductInput
  }

  export type product_tableCreateManyInput = {
    product_id?: number
    product_ref: string
    product_name: string
    product_brand_id: number
    product_category?: string | null
    product_price?: number | null
    product_gen_description?: string | null
    product_gen_characteristic?: string | null
    date_created?: Date | string
    product_factory_price?: number | null
    currency?: string | null
    product_weight?: number | null
    product_coutry_of_origin?: string | null
    product_sell_unit?: string | null
    product_box_weight?: number | null
    product_sku?: string | null
    product_min_quanity?: number | null
    product_volume?: number | null
    product_custom_border_id?: string | null
    product_box_quantity?: number | null
    product_box_volume?: number | null
    product_img?: string | null
  }

  export type product_tableUpdateManyMutationInput = {
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type product_tableUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_brand_id?: IntFieldUpdateOperationsInput | number
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type brand_tableCreateInput = {
    brand_name: string
    brand_country_of_origin?: string | null
    industry?: string | null
    brand_img?: string | null
    date_created?: Date | string
    product?: product_tableCreateNestedManyWithoutBrandInput
    inventory?: inventory_tableCreateNestedManyWithoutBrandInput
  }

  export type brand_tableUncheckedCreateInput = {
    brand_id?: number
    brand_name: string
    brand_country_of_origin?: string | null
    industry?: string | null
    brand_img?: string | null
    date_created?: Date | string
    product?: product_tableUncheckedCreateNestedManyWithoutBrandInput
    inventory?: inventory_tableUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brand_tableUpdateInput = {
    brand_name?: StringFieldUpdateOperationsInput | string
    brand_country_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    brand_img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: product_tableUpdateManyWithoutBrandInput
    inventory?: inventory_tableUpdateManyWithoutBrandInput
  }

  export type brand_tableUncheckedUpdateInput = {
    brand_id?: IntFieldUpdateOperationsInput | number
    brand_name?: StringFieldUpdateOperationsInput | string
    brand_country_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    brand_img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: product_tableUncheckedUpdateManyWithoutBrandInput
    inventory?: inventory_tableUncheckedUpdateManyWithoutBrandInput
  }

  export type brand_tableCreateManyInput = {
    brand_id?: number
    brand_name: string
    brand_country_of_origin?: string | null
    industry?: string | null
    brand_img?: string | null
    date_created?: Date | string
  }

  export type brand_tableUpdateManyMutationInput = {
    brand_name?: StringFieldUpdateOperationsInput | string
    brand_country_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    brand_img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type brand_tableUncheckedUpdateManyInput = {
    brand_id?: IntFieldUpdateOperationsInput | number
    brand_name?: StringFieldUpdateOperationsInput | string
    brand_country_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    brand_img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type order_tableCreateInput = {
    order_product_list: JsonNullValueInput | InputJsonValue
    order_import_cost?: number | null
    order_tax_cost?: number | null
    order_total_cost?: number | null
    currency?: string | null
    order_is_incomming?: boolean | null
    order_emmitted_date?: Date | string | null
    order_delivery_date?: Date | string | null
    order_is_delivered?: boolean | null
    inventory?: inventory_tableCreateNestedManyWithoutOrderInput
  }

  export type order_tableUncheckedCreateInput = {
    order_id?: number
    order_product_list: JsonNullValueInput | InputJsonValue
    order_import_cost?: number | null
    order_tax_cost?: number | null
    order_total_cost?: number | null
    currency?: string | null
    order_is_incomming?: boolean | null
    order_emmitted_date?: Date | string | null
    order_delivery_date?: Date | string | null
    order_is_delivered?: boolean | null
    inventory?: inventory_tableUncheckedCreateNestedManyWithoutOrderInput
  }

  export type order_tableUpdateInput = {
    order_product_list?: JsonNullValueInput | InputJsonValue
    order_import_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_tax_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_total_cost?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    order_is_incomming?: NullableBoolFieldUpdateOperationsInput | boolean | null
    order_emmitted_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_delivery_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_is_delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    inventory?: inventory_tableUpdateManyWithoutOrderInput
  }

  export type order_tableUncheckedUpdateInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_product_list?: JsonNullValueInput | InputJsonValue
    order_import_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_tax_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_total_cost?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    order_is_incomming?: NullableBoolFieldUpdateOperationsInput | boolean | null
    order_emmitted_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_delivery_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_is_delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    inventory?: inventory_tableUncheckedUpdateManyWithoutOrderInput
  }

  export type order_tableCreateManyInput = {
    order_id?: number
    order_product_list: JsonNullValueInput | InputJsonValue
    order_import_cost?: number | null
    order_tax_cost?: number | null
    order_total_cost?: number | null
    currency?: string | null
    order_is_incomming?: boolean | null
    order_emmitted_date?: Date | string | null
    order_delivery_date?: Date | string | null
    order_is_delivered?: boolean | null
  }

  export type order_tableUpdateManyMutationInput = {
    order_product_list?: JsonNullValueInput | InputJsonValue
    order_import_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_tax_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_total_cost?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    order_is_incomming?: NullableBoolFieldUpdateOperationsInput | boolean | null
    order_emmitted_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_delivery_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_is_delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type order_tableUncheckedUpdateManyInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_product_list?: JsonNullValueInput | InputJsonValue
    order_import_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_tax_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_total_cost?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    order_is_incomming?: NullableBoolFieldUpdateOperationsInput | boolean | null
    order_emmitted_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_delivery_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_is_delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type inventory_tableCreateInput = {
    inventory_price: number
    currency?: string | null
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
    brand: brand_tableCreateNestedOneWithoutInventoryInput
    product: product_tableCreateNestedOneWithoutInventoryInput
    order?: order_tableCreateNestedOneWithoutInventoryInput
  }

  export type inventory_tableUncheckedCreateInput = {
    inventory_id?: number
    product_id: number
    order_id?: number | null
    inventory_price: number
    currency?: string | null
    product_brand_id: number
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableUpdateInput = {
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
    brand?: brand_tableUpdateOneRequiredWithoutInventoryInput
    product?: product_tableUpdateOneRequiredWithoutInventoryInput
    order?: order_tableUpdateOneWithoutInventoryInput
  }

  export type inventory_tableUncheckedUpdateInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_brand_id?: IntFieldUpdateOperationsInput | number
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableCreateManyInput = {
    inventory_id?: number
    product_id: number
    order_id?: number | null
    inventory_price: number
    currency?: string | null
    product_brand_id: number
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableUpdateManyMutationInput = {
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableUncheckedUpdateManyInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_brand_id?: IntFieldUpdateOperationsInput | number
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Brand_tableRelationFilter = {
    is?: brand_tableWhereInput
    isNot?: brand_tableWhereInput
  }

  export type Inventory_tableListRelationFilter = {
    every?: inventory_tableWhereInput
    some?: inventory_tableWhereInput
    none?: inventory_tableWhereInput
  }

  export type inventory_tableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_tableCountOrderByAggregateInput = {
    product_id?: SortOrder
    product_ref?: SortOrder
    product_name?: SortOrder
    product_brand_id?: SortOrder
    product_category?: SortOrder
    product_price?: SortOrder
    product_gen_description?: SortOrder
    product_gen_characteristic?: SortOrder
    date_created?: SortOrder
    product_factory_price?: SortOrder
    currency?: SortOrder
    product_weight?: SortOrder
    product_coutry_of_origin?: SortOrder
    product_sell_unit?: SortOrder
    product_box_weight?: SortOrder
    product_sku?: SortOrder
    product_min_quanity?: SortOrder
    product_volume?: SortOrder
    product_custom_border_id?: SortOrder
    product_box_quantity?: SortOrder
    product_box_volume?: SortOrder
    product_img?: SortOrder
  }

  export type product_tableAvgOrderByAggregateInput = {
    product_id?: SortOrder
    product_brand_id?: SortOrder
    product_price?: SortOrder
    product_factory_price?: SortOrder
    product_weight?: SortOrder
    product_box_weight?: SortOrder
    product_min_quanity?: SortOrder
    product_volume?: SortOrder
    product_box_quantity?: SortOrder
    product_box_volume?: SortOrder
  }

  export type product_tableMaxOrderByAggregateInput = {
    product_id?: SortOrder
    product_ref?: SortOrder
    product_name?: SortOrder
    product_brand_id?: SortOrder
    product_category?: SortOrder
    product_price?: SortOrder
    product_gen_description?: SortOrder
    product_gen_characteristic?: SortOrder
    date_created?: SortOrder
    product_factory_price?: SortOrder
    currency?: SortOrder
    product_weight?: SortOrder
    product_coutry_of_origin?: SortOrder
    product_sell_unit?: SortOrder
    product_box_weight?: SortOrder
    product_sku?: SortOrder
    product_min_quanity?: SortOrder
    product_volume?: SortOrder
    product_custom_border_id?: SortOrder
    product_box_quantity?: SortOrder
    product_box_volume?: SortOrder
    product_img?: SortOrder
  }

  export type product_tableMinOrderByAggregateInput = {
    product_id?: SortOrder
    product_ref?: SortOrder
    product_name?: SortOrder
    product_brand_id?: SortOrder
    product_category?: SortOrder
    product_price?: SortOrder
    product_gen_description?: SortOrder
    product_gen_characteristic?: SortOrder
    date_created?: SortOrder
    product_factory_price?: SortOrder
    currency?: SortOrder
    product_weight?: SortOrder
    product_coutry_of_origin?: SortOrder
    product_sell_unit?: SortOrder
    product_box_weight?: SortOrder
    product_sku?: SortOrder
    product_min_quanity?: SortOrder
    product_volume?: SortOrder
    product_custom_border_id?: SortOrder
    product_box_quantity?: SortOrder
    product_box_volume?: SortOrder
    product_img?: SortOrder
  }

  export type product_tableSumOrderByAggregateInput = {
    product_id?: SortOrder
    product_brand_id?: SortOrder
    product_price?: SortOrder
    product_factory_price?: SortOrder
    product_weight?: SortOrder
    product_box_weight?: SortOrder
    product_min_quanity?: SortOrder
    product_volume?: SortOrder
    product_box_quantity?: SortOrder
    product_box_volume?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type Product_tableListRelationFilter = {
    every?: product_tableWhereInput
    some?: product_tableWhereInput
    none?: product_tableWhereInput
  }

  export type product_tableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type brand_tableCountOrderByAggregateInput = {
    brand_id?: SortOrder
    brand_name?: SortOrder
    brand_country_of_origin?: SortOrder
    industry?: SortOrder
    brand_img?: SortOrder
    date_created?: SortOrder
  }

  export type brand_tableAvgOrderByAggregateInput = {
    brand_id?: SortOrder
  }

  export type brand_tableMaxOrderByAggregateInput = {
    brand_id?: SortOrder
    brand_name?: SortOrder
    brand_country_of_origin?: SortOrder
    industry?: SortOrder
    brand_img?: SortOrder
    date_created?: SortOrder
  }

  export type brand_tableMinOrderByAggregateInput = {
    brand_id?: SortOrder
    brand_name?: SortOrder
    brand_country_of_origin?: SortOrder
    industry?: SortOrder
    brand_img?: SortOrder
    date_created?: SortOrder
  }

  export type brand_tableSumOrderByAggregateInput = {
    brand_id?: SortOrder
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type order_tableCountOrderByAggregateInput = {
    order_id?: SortOrder
    order_product_list?: SortOrder
    order_import_cost?: SortOrder
    order_tax_cost?: SortOrder
    order_total_cost?: SortOrder
    currency?: SortOrder
    order_is_incomming?: SortOrder
    order_emmitted_date?: SortOrder
    order_delivery_date?: SortOrder
    order_is_delivered?: SortOrder
  }

  export type order_tableAvgOrderByAggregateInput = {
    order_id?: SortOrder
    order_import_cost?: SortOrder
    order_tax_cost?: SortOrder
    order_total_cost?: SortOrder
  }

  export type order_tableMaxOrderByAggregateInput = {
    order_id?: SortOrder
    order_import_cost?: SortOrder
    order_tax_cost?: SortOrder
    order_total_cost?: SortOrder
    currency?: SortOrder
    order_is_incomming?: SortOrder
    order_emmitted_date?: SortOrder
    order_delivery_date?: SortOrder
    order_is_delivered?: SortOrder
  }

  export type order_tableMinOrderByAggregateInput = {
    order_id?: SortOrder
    order_import_cost?: SortOrder
    order_tax_cost?: SortOrder
    order_total_cost?: SortOrder
    currency?: SortOrder
    order_is_incomming?: SortOrder
    order_emmitted_date?: SortOrder
    order_delivery_date?: SortOrder
    order_is_delivered?: SortOrder
  }

  export type order_tableSumOrderByAggregateInput = {
    order_id?: SortOrder
    order_import_cost?: SortOrder
    order_tax_cost?: SortOrder
    order_total_cost?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type Product_tableRelationFilter = {
    is?: product_tableWhereInput
    isNot?: product_tableWhereInput
  }

  export type Order_tableRelationFilter = {
    is?: order_tableWhereInput | null
    isNot?: order_tableWhereInput | null
  }

  export type inventory_tableCountOrderByAggregateInput = {
    inventory_id?: SortOrder
    product_id?: SortOrder
    order_id?: SortOrder
    inventory_price?: SortOrder
    currency?: SortOrder
    product_brand_id?: SortOrder
    date_created?: SortOrder
    inventory_quantity?: SortOrder
    last_updated?: SortOrder
    agent_id?: SortOrder
    product_mouvement?: SortOrder
  }

  export type inventory_tableAvgOrderByAggregateInput = {
    inventory_id?: SortOrder
    product_id?: SortOrder
    order_id?: SortOrder
    inventory_price?: SortOrder
    product_brand_id?: SortOrder
    inventory_quantity?: SortOrder
    agent_id?: SortOrder
  }

  export type inventory_tableMaxOrderByAggregateInput = {
    inventory_id?: SortOrder
    product_id?: SortOrder
    order_id?: SortOrder
    inventory_price?: SortOrder
    currency?: SortOrder
    product_brand_id?: SortOrder
    date_created?: SortOrder
    inventory_quantity?: SortOrder
    last_updated?: SortOrder
    agent_id?: SortOrder
  }

  export type inventory_tableMinOrderByAggregateInput = {
    inventory_id?: SortOrder
    product_id?: SortOrder
    order_id?: SortOrder
    inventory_price?: SortOrder
    currency?: SortOrder
    product_brand_id?: SortOrder
    date_created?: SortOrder
    inventory_quantity?: SortOrder
    last_updated?: SortOrder
    agent_id?: SortOrder
  }

  export type inventory_tableSumOrderByAggregateInput = {
    inventory_id?: SortOrder
    product_id?: SortOrder
    order_id?: SortOrder
    inventory_price?: SortOrder
    product_brand_id?: SortOrder
    inventory_quantity?: SortOrder
    agent_id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type brand_tableCreateNestedOneWithoutProductInput = {
    create?: XOR<brand_tableCreateWithoutProductInput, brand_tableUncheckedCreateWithoutProductInput>
    connectOrCreate?: brand_tableCreateOrConnectWithoutProductInput
    connect?: brand_tableWhereUniqueInput
  }

  export type inventory_tableCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutProductInput>, Enumerable<inventory_tableUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutProductInput>
    createMany?: inventory_tableCreateManyProductInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
  }

  export type inventory_tableUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutProductInput>, Enumerable<inventory_tableUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutProductInput>
    createMany?: inventory_tableCreateManyProductInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type brand_tableUpdateOneRequiredWithoutProductInput = {
    create?: XOR<brand_tableCreateWithoutProductInput, brand_tableUncheckedCreateWithoutProductInput>
    connectOrCreate?: brand_tableCreateOrConnectWithoutProductInput
    upsert?: brand_tableUpsertWithoutProductInput
    connect?: brand_tableWhereUniqueInput
    update?: XOR<brand_tableUpdateWithoutProductInput, brand_tableUncheckedUpdateWithoutProductInput>
  }

  export type inventory_tableUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutProductInput>, Enumerable<inventory_tableUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<inventory_tableUpsertWithWhereUniqueWithoutProductInput>
    createMany?: inventory_tableCreateManyProductInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
    set?: Enumerable<inventory_tableWhereUniqueInput>
    disconnect?: Enumerable<inventory_tableWhereUniqueInput>
    delete?: Enumerable<inventory_tableWhereUniqueInput>
    update?: Enumerable<inventory_tableUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<inventory_tableUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<inventory_tableScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type inventory_tableUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutProductInput>, Enumerable<inventory_tableUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<inventory_tableUpsertWithWhereUniqueWithoutProductInput>
    createMany?: inventory_tableCreateManyProductInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
    set?: Enumerable<inventory_tableWhereUniqueInput>
    disconnect?: Enumerable<inventory_tableWhereUniqueInput>
    delete?: Enumerable<inventory_tableWhereUniqueInput>
    update?: Enumerable<inventory_tableUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<inventory_tableUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<inventory_tableScalarWhereInput>
  }

  export type product_tableCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<product_tableCreateWithoutBrandInput>, Enumerable<product_tableUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<product_tableCreateOrConnectWithoutBrandInput>
    createMany?: product_tableCreateManyBrandInputEnvelope
    connect?: Enumerable<product_tableWhereUniqueInput>
  }

  export type inventory_tableCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutBrandInput>, Enumerable<inventory_tableUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutBrandInput>
    createMany?: inventory_tableCreateManyBrandInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
  }

  export type product_tableUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<product_tableCreateWithoutBrandInput>, Enumerable<product_tableUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<product_tableCreateOrConnectWithoutBrandInput>
    createMany?: product_tableCreateManyBrandInputEnvelope
    connect?: Enumerable<product_tableWhereUniqueInput>
  }

  export type inventory_tableUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutBrandInput>, Enumerable<inventory_tableUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutBrandInput>
    createMany?: inventory_tableCreateManyBrandInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
  }

  export type product_tableUpdateManyWithoutBrandInput = {
    create?: XOR<Enumerable<product_tableCreateWithoutBrandInput>, Enumerable<product_tableUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<product_tableCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<product_tableUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: product_tableCreateManyBrandInputEnvelope
    connect?: Enumerable<product_tableWhereUniqueInput>
    set?: Enumerable<product_tableWhereUniqueInput>
    disconnect?: Enumerable<product_tableWhereUniqueInput>
    delete?: Enumerable<product_tableWhereUniqueInput>
    update?: Enumerable<product_tableUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<product_tableUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<product_tableScalarWhereInput>
  }

  export type inventory_tableUpdateManyWithoutBrandInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutBrandInput>, Enumerable<inventory_tableUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<inventory_tableUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: inventory_tableCreateManyBrandInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
    set?: Enumerable<inventory_tableWhereUniqueInput>
    disconnect?: Enumerable<inventory_tableWhereUniqueInput>
    delete?: Enumerable<inventory_tableWhereUniqueInput>
    update?: Enumerable<inventory_tableUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<inventory_tableUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<inventory_tableScalarWhereInput>
  }

  export type product_tableUncheckedUpdateManyWithoutBrandInput = {
    create?: XOR<Enumerable<product_tableCreateWithoutBrandInput>, Enumerable<product_tableUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<product_tableCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<product_tableUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: product_tableCreateManyBrandInputEnvelope
    connect?: Enumerable<product_tableWhereUniqueInput>
    set?: Enumerable<product_tableWhereUniqueInput>
    disconnect?: Enumerable<product_tableWhereUniqueInput>
    delete?: Enumerable<product_tableWhereUniqueInput>
    update?: Enumerable<product_tableUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<product_tableUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<product_tableScalarWhereInput>
  }

  export type inventory_tableUncheckedUpdateManyWithoutBrandInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutBrandInput>, Enumerable<inventory_tableUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<inventory_tableUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: inventory_tableCreateManyBrandInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
    set?: Enumerable<inventory_tableWhereUniqueInput>
    disconnect?: Enumerable<inventory_tableWhereUniqueInput>
    delete?: Enumerable<inventory_tableWhereUniqueInput>
    update?: Enumerable<inventory_tableUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<inventory_tableUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<inventory_tableScalarWhereInput>
  }

  export type inventory_tableCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutOrderInput>, Enumerable<inventory_tableUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutOrderInput>
    createMany?: inventory_tableCreateManyOrderInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
  }

  export type inventory_tableUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutOrderInput>, Enumerable<inventory_tableUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutOrderInput>
    createMany?: inventory_tableCreateManyOrderInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type inventory_tableUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutOrderInput>, Enumerable<inventory_tableUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<inventory_tableUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: inventory_tableCreateManyOrderInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
    set?: Enumerable<inventory_tableWhereUniqueInput>
    disconnect?: Enumerable<inventory_tableWhereUniqueInput>
    delete?: Enumerable<inventory_tableWhereUniqueInput>
    update?: Enumerable<inventory_tableUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<inventory_tableUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<inventory_tableScalarWhereInput>
  }

  export type inventory_tableUncheckedUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<inventory_tableCreateWithoutOrderInput>, Enumerable<inventory_tableUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<inventory_tableCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<inventory_tableUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: inventory_tableCreateManyOrderInputEnvelope
    connect?: Enumerable<inventory_tableWhereUniqueInput>
    set?: Enumerable<inventory_tableWhereUniqueInput>
    disconnect?: Enumerable<inventory_tableWhereUniqueInput>
    delete?: Enumerable<inventory_tableWhereUniqueInput>
    update?: Enumerable<inventory_tableUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<inventory_tableUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<inventory_tableScalarWhereInput>
  }

  export type brand_tableCreateNestedOneWithoutInventoryInput = {
    create?: XOR<brand_tableCreateWithoutInventoryInput, brand_tableUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: brand_tableCreateOrConnectWithoutInventoryInput
    connect?: brand_tableWhereUniqueInput
  }

  export type product_tableCreateNestedOneWithoutInventoryInput = {
    create?: XOR<product_tableCreateWithoutInventoryInput, product_tableUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: product_tableCreateOrConnectWithoutInventoryInput
    connect?: product_tableWhereUniqueInput
  }

  export type order_tableCreateNestedOneWithoutInventoryInput = {
    create?: XOR<order_tableCreateWithoutInventoryInput, order_tableUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: order_tableCreateOrConnectWithoutInventoryInput
    connect?: order_tableWhereUniqueInput
  }

  export type brand_tableUpdateOneRequiredWithoutInventoryInput = {
    create?: XOR<brand_tableCreateWithoutInventoryInput, brand_tableUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: brand_tableCreateOrConnectWithoutInventoryInput
    upsert?: brand_tableUpsertWithoutInventoryInput
    connect?: brand_tableWhereUniqueInput
    update?: XOR<brand_tableUpdateWithoutInventoryInput, brand_tableUncheckedUpdateWithoutInventoryInput>
  }

  export type product_tableUpdateOneRequiredWithoutInventoryInput = {
    create?: XOR<product_tableCreateWithoutInventoryInput, product_tableUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: product_tableCreateOrConnectWithoutInventoryInput
    upsert?: product_tableUpsertWithoutInventoryInput
    connect?: product_tableWhereUniqueInput
    update?: XOR<product_tableUpdateWithoutInventoryInput, product_tableUncheckedUpdateWithoutInventoryInput>
  }

  export type order_tableUpdateOneWithoutInventoryInput = {
    create?: XOR<order_tableCreateWithoutInventoryInput, order_tableUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: order_tableCreateOrConnectWithoutInventoryInput
    upsert?: order_tableUpsertWithoutInventoryInput
    connect?: order_tableWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<order_tableUpdateWithoutInventoryInput, order_tableUncheckedUpdateWithoutInventoryInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type brand_tableCreateWithoutProductInput = {
    brand_name: string
    brand_country_of_origin?: string | null
    industry?: string | null
    brand_img?: string | null
    date_created?: Date | string
    inventory?: inventory_tableCreateNestedManyWithoutBrandInput
  }

  export type brand_tableUncheckedCreateWithoutProductInput = {
    brand_id?: number
    brand_name: string
    brand_country_of_origin?: string | null
    industry?: string | null
    brand_img?: string | null
    date_created?: Date | string
    inventory?: inventory_tableUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brand_tableCreateOrConnectWithoutProductInput = {
    where: brand_tableWhereUniqueInput
    create: XOR<brand_tableCreateWithoutProductInput, brand_tableUncheckedCreateWithoutProductInput>
  }

  export type inventory_tableCreateWithoutProductInput = {
    inventory_price: number
    currency?: string | null
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
    brand: brand_tableCreateNestedOneWithoutInventoryInput
    order?: order_tableCreateNestedOneWithoutInventoryInput
  }

  export type inventory_tableUncheckedCreateWithoutProductInput = {
    inventory_id?: number
    order_id?: number | null
    inventory_price: number
    currency?: string | null
    product_brand_id: number
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableCreateOrConnectWithoutProductInput = {
    where: inventory_tableWhereUniqueInput
    create: XOR<inventory_tableCreateWithoutProductInput, inventory_tableUncheckedCreateWithoutProductInput>
  }

  export type inventory_tableCreateManyProductInputEnvelope = {
    data: Enumerable<inventory_tableCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type brand_tableUpsertWithoutProductInput = {
    update: XOR<brand_tableUpdateWithoutProductInput, brand_tableUncheckedUpdateWithoutProductInput>
    create: XOR<brand_tableCreateWithoutProductInput, brand_tableUncheckedCreateWithoutProductInput>
  }

  export type brand_tableUpdateWithoutProductInput = {
    brand_name?: StringFieldUpdateOperationsInput | string
    brand_country_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    brand_img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: inventory_tableUpdateManyWithoutBrandInput
  }

  export type brand_tableUncheckedUpdateWithoutProductInput = {
    brand_id?: IntFieldUpdateOperationsInput | number
    brand_name?: StringFieldUpdateOperationsInput | string
    brand_country_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    brand_img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: inventory_tableUncheckedUpdateManyWithoutBrandInput
  }

  export type inventory_tableUpsertWithWhereUniqueWithoutProductInput = {
    where: inventory_tableWhereUniqueInput
    update: XOR<inventory_tableUpdateWithoutProductInput, inventory_tableUncheckedUpdateWithoutProductInput>
    create: XOR<inventory_tableCreateWithoutProductInput, inventory_tableUncheckedCreateWithoutProductInput>
  }

  export type inventory_tableUpdateWithWhereUniqueWithoutProductInput = {
    where: inventory_tableWhereUniqueInput
    data: XOR<inventory_tableUpdateWithoutProductInput, inventory_tableUncheckedUpdateWithoutProductInput>
  }

  export type inventory_tableUpdateManyWithWhereWithoutProductInput = {
    where: inventory_tableScalarWhereInput
    data: XOR<inventory_tableUpdateManyMutationInput, inventory_tableUncheckedUpdateManyWithoutInventoryInput>
  }

  export type inventory_tableScalarWhereInput = {
    AND?: Enumerable<inventory_tableScalarWhereInput>
    OR?: Enumerable<inventory_tableScalarWhereInput>
    NOT?: Enumerable<inventory_tableScalarWhereInput>
    inventory_id?: IntFilter | number
    product_id?: IntFilter | number
    order_id?: IntNullableFilter | number | null
    inventory_price?: IntFilter | number
    currency?: StringNullableFilter | string | null
    product_brand_id?: IntFilter | number
    date_created?: DateTimeNullableFilter | Date | string | null
    inventory_quantity?: IntFilter | number
    last_updated?: DateTimeFilter | Date | string
    agent_id?: IntNullableFilter | number | null
    product_mouvement?: JsonNullableFilter
  }

  export type product_tableCreateWithoutBrandInput = {
    product_ref: string
    product_name: string
    product_category?: string | null
    product_price?: number | null
    product_gen_description?: string | null
    product_gen_characteristic?: string | null
    date_created?: Date | string
    product_factory_price?: number | null
    currency?: string | null
    product_weight?: number | null
    product_coutry_of_origin?: string | null
    product_sell_unit?: string | null
    product_box_weight?: number | null
    product_sku?: string | null
    product_min_quanity?: number | null
    product_volume?: number | null
    product_custom_border_id?: string | null
    product_box_quantity?: number | null
    product_box_volume?: number | null
    product_img?: string | null
    inventory?: inventory_tableCreateNestedManyWithoutProductInput
  }

  export type product_tableUncheckedCreateWithoutBrandInput = {
    product_id?: number
    product_ref: string
    product_name: string
    product_category?: string | null
    product_price?: number | null
    product_gen_description?: string | null
    product_gen_characteristic?: string | null
    date_created?: Date | string
    product_factory_price?: number | null
    currency?: string | null
    product_weight?: number | null
    product_coutry_of_origin?: string | null
    product_sell_unit?: string | null
    product_box_weight?: number | null
    product_sku?: string | null
    product_min_quanity?: number | null
    product_volume?: number | null
    product_custom_border_id?: string | null
    product_box_quantity?: number | null
    product_box_volume?: number | null
    product_img?: string | null
    inventory?: inventory_tableUncheckedCreateNestedManyWithoutProductInput
  }

  export type product_tableCreateOrConnectWithoutBrandInput = {
    where: product_tableWhereUniqueInput
    create: XOR<product_tableCreateWithoutBrandInput, product_tableUncheckedCreateWithoutBrandInput>
  }

  export type product_tableCreateManyBrandInputEnvelope = {
    data: Enumerable<product_tableCreateManyBrandInput>
    skipDuplicates?: boolean
  }

  export type inventory_tableCreateWithoutBrandInput = {
    inventory_price: number
    currency?: string | null
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
    product: product_tableCreateNestedOneWithoutInventoryInput
    order?: order_tableCreateNestedOneWithoutInventoryInput
  }

  export type inventory_tableUncheckedCreateWithoutBrandInput = {
    inventory_id?: number
    product_id: number
    order_id?: number | null
    inventory_price: number
    currency?: string | null
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableCreateOrConnectWithoutBrandInput = {
    where: inventory_tableWhereUniqueInput
    create: XOR<inventory_tableCreateWithoutBrandInput, inventory_tableUncheckedCreateWithoutBrandInput>
  }

  export type inventory_tableCreateManyBrandInputEnvelope = {
    data: Enumerable<inventory_tableCreateManyBrandInput>
    skipDuplicates?: boolean
  }

  export type product_tableUpsertWithWhereUniqueWithoutBrandInput = {
    where: product_tableWhereUniqueInput
    update: XOR<product_tableUpdateWithoutBrandInput, product_tableUncheckedUpdateWithoutBrandInput>
    create: XOR<product_tableCreateWithoutBrandInput, product_tableUncheckedCreateWithoutBrandInput>
  }

  export type product_tableUpdateWithWhereUniqueWithoutBrandInput = {
    where: product_tableWhereUniqueInput
    data: XOR<product_tableUpdateWithoutBrandInput, product_tableUncheckedUpdateWithoutBrandInput>
  }

  export type product_tableUpdateManyWithWhereWithoutBrandInput = {
    where: product_tableScalarWhereInput
    data: XOR<product_tableUpdateManyMutationInput, product_tableUncheckedUpdateManyWithoutProductInput>
  }

  export type product_tableScalarWhereInput = {
    AND?: Enumerable<product_tableScalarWhereInput>
    OR?: Enumerable<product_tableScalarWhereInput>
    NOT?: Enumerable<product_tableScalarWhereInput>
    product_id?: IntFilter | number
    product_ref?: StringFilter | string
    product_name?: StringFilter | string
    product_brand_id?: IntFilter | number
    product_category?: StringNullableFilter | string | null
    product_price?: IntNullableFilter | number | null
    product_gen_description?: StringNullableFilter | string | null
    product_gen_characteristic?: StringNullableFilter | string | null
    date_created?: DateTimeFilter | Date | string
    product_factory_price?: IntNullableFilter | number | null
    currency?: StringNullableFilter | string | null
    product_weight?: IntNullableFilter | number | null
    product_coutry_of_origin?: StringNullableFilter | string | null
    product_sell_unit?: StringNullableFilter | string | null
    product_box_weight?: IntNullableFilter | number | null
    product_sku?: StringNullableFilter | string | null
    product_min_quanity?: IntNullableFilter | number | null
    product_volume?: IntNullableFilter | number | null
    product_custom_border_id?: StringNullableFilter | string | null
    product_box_quantity?: IntNullableFilter | number | null
    product_box_volume?: IntNullableFilter | number | null
    product_img?: StringNullableFilter | string | null
  }

  export type inventory_tableUpsertWithWhereUniqueWithoutBrandInput = {
    where: inventory_tableWhereUniqueInput
    update: XOR<inventory_tableUpdateWithoutBrandInput, inventory_tableUncheckedUpdateWithoutBrandInput>
    create: XOR<inventory_tableCreateWithoutBrandInput, inventory_tableUncheckedCreateWithoutBrandInput>
  }

  export type inventory_tableUpdateWithWhereUniqueWithoutBrandInput = {
    where: inventory_tableWhereUniqueInput
    data: XOR<inventory_tableUpdateWithoutBrandInput, inventory_tableUncheckedUpdateWithoutBrandInput>
  }

  export type inventory_tableUpdateManyWithWhereWithoutBrandInput = {
    where: inventory_tableScalarWhereInput
    data: XOR<inventory_tableUpdateManyMutationInput, inventory_tableUncheckedUpdateManyWithoutInventoryInput>
  }

  export type inventory_tableCreateWithoutOrderInput = {
    inventory_price: number
    currency?: string | null
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
    brand: brand_tableCreateNestedOneWithoutInventoryInput
    product: product_tableCreateNestedOneWithoutInventoryInput
  }

  export type inventory_tableUncheckedCreateWithoutOrderInput = {
    inventory_id?: number
    product_id: number
    inventory_price: number
    currency?: string | null
    product_brand_id: number
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableCreateOrConnectWithoutOrderInput = {
    where: inventory_tableWhereUniqueInput
    create: XOR<inventory_tableCreateWithoutOrderInput, inventory_tableUncheckedCreateWithoutOrderInput>
  }

  export type inventory_tableCreateManyOrderInputEnvelope = {
    data: Enumerable<inventory_tableCreateManyOrderInput>
    skipDuplicates?: boolean
  }

  export type inventory_tableUpsertWithWhereUniqueWithoutOrderInput = {
    where: inventory_tableWhereUniqueInput
    update: XOR<inventory_tableUpdateWithoutOrderInput, inventory_tableUncheckedUpdateWithoutOrderInput>
    create: XOR<inventory_tableCreateWithoutOrderInput, inventory_tableUncheckedCreateWithoutOrderInput>
  }

  export type inventory_tableUpdateWithWhereUniqueWithoutOrderInput = {
    where: inventory_tableWhereUniqueInput
    data: XOR<inventory_tableUpdateWithoutOrderInput, inventory_tableUncheckedUpdateWithoutOrderInput>
  }

  export type inventory_tableUpdateManyWithWhereWithoutOrderInput = {
    where: inventory_tableScalarWhereInput
    data: XOR<inventory_tableUpdateManyMutationInput, inventory_tableUncheckedUpdateManyWithoutInventoryInput>
  }

  export type brand_tableCreateWithoutInventoryInput = {
    brand_name: string
    brand_country_of_origin?: string | null
    industry?: string | null
    brand_img?: string | null
    date_created?: Date | string
    product?: product_tableCreateNestedManyWithoutBrandInput
  }

  export type brand_tableUncheckedCreateWithoutInventoryInput = {
    brand_id?: number
    brand_name: string
    brand_country_of_origin?: string | null
    industry?: string | null
    brand_img?: string | null
    date_created?: Date | string
    product?: product_tableUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brand_tableCreateOrConnectWithoutInventoryInput = {
    where: brand_tableWhereUniqueInput
    create: XOR<brand_tableCreateWithoutInventoryInput, brand_tableUncheckedCreateWithoutInventoryInput>
  }

  export type product_tableCreateWithoutInventoryInput = {
    product_ref: string
    product_name: string
    product_category?: string | null
    product_price?: number | null
    product_gen_description?: string | null
    product_gen_characteristic?: string | null
    date_created?: Date | string
    product_factory_price?: number | null
    currency?: string | null
    product_weight?: number | null
    product_coutry_of_origin?: string | null
    product_sell_unit?: string | null
    product_box_weight?: number | null
    product_sku?: string | null
    product_min_quanity?: number | null
    product_volume?: number | null
    product_custom_border_id?: string | null
    product_box_quantity?: number | null
    product_box_volume?: number | null
    product_img?: string | null
    brand: brand_tableCreateNestedOneWithoutProductInput
  }

  export type product_tableUncheckedCreateWithoutInventoryInput = {
    product_id?: number
    product_ref: string
    product_name: string
    product_brand_id: number
    product_category?: string | null
    product_price?: number | null
    product_gen_description?: string | null
    product_gen_characteristic?: string | null
    date_created?: Date | string
    product_factory_price?: number | null
    currency?: string | null
    product_weight?: number | null
    product_coutry_of_origin?: string | null
    product_sell_unit?: string | null
    product_box_weight?: number | null
    product_sku?: string | null
    product_min_quanity?: number | null
    product_volume?: number | null
    product_custom_border_id?: string | null
    product_box_quantity?: number | null
    product_box_volume?: number | null
    product_img?: string | null
  }

  export type product_tableCreateOrConnectWithoutInventoryInput = {
    where: product_tableWhereUniqueInput
    create: XOR<product_tableCreateWithoutInventoryInput, product_tableUncheckedCreateWithoutInventoryInput>
  }

  export type order_tableCreateWithoutInventoryInput = {
    order_product_list: JsonNullValueInput | InputJsonValue
    order_import_cost?: number | null
    order_tax_cost?: number | null
    order_total_cost?: number | null
    currency?: string | null
    order_is_incomming?: boolean | null
    order_emmitted_date?: Date | string | null
    order_delivery_date?: Date | string | null
    order_is_delivered?: boolean | null
  }

  export type order_tableUncheckedCreateWithoutInventoryInput = {
    order_id?: number
    order_product_list: JsonNullValueInput | InputJsonValue
    order_import_cost?: number | null
    order_tax_cost?: number | null
    order_total_cost?: number | null
    currency?: string | null
    order_is_incomming?: boolean | null
    order_emmitted_date?: Date | string | null
    order_delivery_date?: Date | string | null
    order_is_delivered?: boolean | null
  }

  export type order_tableCreateOrConnectWithoutInventoryInput = {
    where: order_tableWhereUniqueInput
    create: XOR<order_tableCreateWithoutInventoryInput, order_tableUncheckedCreateWithoutInventoryInput>
  }

  export type brand_tableUpsertWithoutInventoryInput = {
    update: XOR<brand_tableUpdateWithoutInventoryInput, brand_tableUncheckedUpdateWithoutInventoryInput>
    create: XOR<brand_tableCreateWithoutInventoryInput, brand_tableUncheckedCreateWithoutInventoryInput>
  }

  export type brand_tableUpdateWithoutInventoryInput = {
    brand_name?: StringFieldUpdateOperationsInput | string
    brand_country_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    brand_img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: product_tableUpdateManyWithoutBrandInput
  }

  export type brand_tableUncheckedUpdateWithoutInventoryInput = {
    brand_id?: IntFieldUpdateOperationsInput | number
    brand_name?: StringFieldUpdateOperationsInput | string
    brand_country_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    brand_img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: product_tableUncheckedUpdateManyWithoutBrandInput
  }

  export type product_tableUpsertWithoutInventoryInput = {
    update: XOR<product_tableUpdateWithoutInventoryInput, product_tableUncheckedUpdateWithoutInventoryInput>
    create: XOR<product_tableCreateWithoutInventoryInput, product_tableUncheckedCreateWithoutInventoryInput>
  }

  export type product_tableUpdateWithoutInventoryInput = {
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: brand_tableUpdateOneRequiredWithoutProductInput
  }

  export type product_tableUncheckedUpdateWithoutInventoryInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_brand_id?: IntFieldUpdateOperationsInput | number
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type order_tableUpsertWithoutInventoryInput = {
    update: XOR<order_tableUpdateWithoutInventoryInput, order_tableUncheckedUpdateWithoutInventoryInput>
    create: XOR<order_tableCreateWithoutInventoryInput, order_tableUncheckedCreateWithoutInventoryInput>
  }

  export type order_tableUpdateWithoutInventoryInput = {
    order_product_list?: JsonNullValueInput | InputJsonValue
    order_import_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_tax_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_total_cost?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    order_is_incomming?: NullableBoolFieldUpdateOperationsInput | boolean | null
    order_emmitted_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_delivery_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_is_delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type order_tableUncheckedUpdateWithoutInventoryInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_product_list?: JsonNullValueInput | InputJsonValue
    order_import_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_tax_cost?: NullableIntFieldUpdateOperationsInput | number | null
    order_total_cost?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    order_is_incomming?: NullableBoolFieldUpdateOperationsInput | boolean | null
    order_emmitted_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_delivery_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_is_delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type inventory_tableCreateManyProductInput = {
    inventory_id?: number
    order_id?: number | null
    inventory_price: number
    currency?: string | null
    product_brand_id: number
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableUpdateWithoutProductInput = {
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
    brand?: brand_tableUpdateOneRequiredWithoutInventoryInput
    order?: order_tableUpdateOneWithoutInventoryInput
  }

  export type inventory_tableUncheckedUpdateWithoutProductInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_brand_id?: IntFieldUpdateOperationsInput | number
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableUncheckedUpdateManyWithoutInventoryInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_brand_id?: IntFieldUpdateOperationsInput | number
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type product_tableCreateManyBrandInput = {
    product_id?: number
    product_ref: string
    product_name: string
    product_category?: string | null
    product_price?: number | null
    product_gen_description?: string | null
    product_gen_characteristic?: string | null
    date_created?: Date | string
    product_factory_price?: number | null
    currency?: string | null
    product_weight?: number | null
    product_coutry_of_origin?: string | null
    product_sell_unit?: string | null
    product_box_weight?: number | null
    product_sku?: string | null
    product_min_quanity?: number | null
    product_volume?: number | null
    product_custom_border_id?: string | null
    product_box_quantity?: number | null
    product_box_volume?: number | null
    product_img?: string | null
  }

  export type inventory_tableCreateManyBrandInput = {
    inventory_id?: number
    product_id: number
    order_id?: number | null
    inventory_price: number
    currency?: string | null
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type product_tableUpdateWithoutBrandInput = {
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: inventory_tableUpdateManyWithoutProductInput
  }

  export type product_tableUncheckedUpdateWithoutBrandInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: inventory_tableUncheckedUpdateManyWithoutProductInput
  }

  export type product_tableUncheckedUpdateManyWithoutProductInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_ref?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_category?: NullableStringFieldUpdateOperationsInput | string | null
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    product_gen_description?: NullableStringFieldUpdateOperationsInput | string | null
    product_gen_characteristic?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    product_factory_price?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_coutry_of_origin?: NullableStringFieldUpdateOperationsInput | string | null
    product_sell_unit?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_weight?: NullableIntFieldUpdateOperationsInput | number | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    product_min_quanity?: NullableIntFieldUpdateOperationsInput | number | null
    product_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_custom_border_id?: NullableStringFieldUpdateOperationsInput | string | null
    product_box_quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product_box_volume?: NullableIntFieldUpdateOperationsInput | number | null
    product_img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type inventory_tableUpdateWithoutBrandInput = {
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
    product?: product_tableUpdateOneRequiredWithoutInventoryInput
    order?: order_tableUpdateOneWithoutInventoryInput
  }

  export type inventory_tableUncheckedUpdateWithoutBrandInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableCreateManyOrderInput = {
    inventory_id?: number
    product_id: number
    inventory_price: number
    currency?: string | null
    product_brand_id: number
    date_created?: Date | string | null
    inventory_quantity?: number
    last_updated?: Date | string
    agent_id?: number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }

  export type inventory_tableUpdateWithoutOrderInput = {
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
    brand?: brand_tableUpdateOneRequiredWithoutInventoryInput
    product?: product_tableUpdateOneRequiredWithoutInventoryInput
  }

  export type inventory_tableUncheckedUpdateWithoutOrderInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    inventory_price?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    product_brand_id?: IntFieldUpdateOperationsInput | number
    date_created?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inventory_quantity?: IntFieldUpdateOperationsInput | number
    last_updated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_mouvement?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}