
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.2.1
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.2.1",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Product_tableScalarFieldEnum = makeEnum({
  product_id: 'product_id',
  product_ref: 'product_ref',
  product_name: 'product_name',
  product_brand_id: 'product_brand_id',
  product_category: 'product_category',
  product_price: 'product_price',
  product_gen_description: 'product_gen_description',
  product_gen_characteristic: 'product_gen_characteristic',
  date_created: 'date_created',
  product_factory_price: 'product_factory_price',
  currency: 'currency',
  product_weight: 'product_weight',
  product_coutry_of_origin: 'product_coutry_of_origin',
  product_sell_unit: 'product_sell_unit',
  product_box_weight: 'product_box_weight',
  product_sku: 'product_sku',
  product_min_quanity: 'product_min_quanity',
  product_volume: 'product_volume',
  product_custom_border_id: 'product_custom_border_id',
  product_box_quantity: 'product_box_quantity',
  product_box_volume: 'product_box_volume',
  product_img: 'product_img'
});

exports.Prisma.Brand_tableScalarFieldEnum = makeEnum({
  brand_id: 'brand_id',
  brand_name: 'brand_name',
  brand_country_of_origin: 'brand_country_of_origin',
  industry: 'industry',
  brand_img: 'brand_img',
  date_created: 'date_created'
});

exports.Prisma.Order_tableScalarFieldEnum = makeEnum({
  order_id: 'order_id',
  order_product_list: 'order_product_list',
  order_import_cost: 'order_import_cost',
  order_tax_cost: 'order_tax_cost',
  order_total_cost: 'order_total_cost',
  currency: 'currency',
  order_is_incomming: 'order_is_incomming',
  order_emmitted_date: 'order_emmitted_date',
  order_delivery_date: 'order_delivery_date',
  order_is_delivered: 'order_is_delivered'
});

exports.Prisma.Inventory_tableScalarFieldEnum = makeEnum({
  inventory_id: 'inventory_id',
  product_id: 'product_id',
  order_id: 'order_id',
  inventory_price: 'inventory_price',
  currency: 'currency',
  product_brand_id: 'product_brand_id',
  date_created: 'date_created',
  inventory_quantity: 'inventory_quantity',
  last_updated: 'last_updated',
  agent_id: 'agent_id',
  product_mouvement: 'product_mouvement'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: 'JsonNull'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});


exports.Prisma.ModelName = makeEnum({
  product_table: 'product_table',
  brand_table: 'brand_table',
  order_table: 'order_table',
  inventory_table: 'inventory_table'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
